@model IEnumerable<SODto>
@{
    ViewData["Title"] = "Sale Order";
    var currentUrl = Context.Request.Path.ToString();
    var tenantId = Context.TenantId();
    var companyId = Context.CompanyId();
    var isTenantAdmin = Context.IsTenantAdmin();
}

<!-- Page Header -->
<div class="page-header">
    <div class="row align-items-center">
        <div class="col-md">
            <div class="d-sm-flex mt-3">
                <h1 class="page-header-title">
                    @ViewBag.NameOfForm
                </h1>
            </div>
        </div>
        <div class="col-md-auto">
            <a class="btn btn-primary" asp-action="Create"><i class="bi bi-plus-lg"></i> Add</a>
        </div>
    </div>
</div>
<!-- End Page Header -->
<!-- Card -->
<div class="card">
    <!-- Header -->
    <div class="card-header card-header-content-sm-between">
        <div class="mb-2 mb-sm-0">
            <form>
                <!-- Search -->
                <div class="input-group input-group-merge input-group-flush">
                    <div class="input-group-prepend input-group-text">
                        <i class="bi-search"></i>
                    </div>
                    <input id="datatableSearch" type="search" class="form-control" placeholder="Search orders" aria-label="Search orders">
                </div>
                <!-- End Search -->
            </form>
        </div>

        <div class="d-grid d-sm-flex justify-content-sm-end align-items-sm-center gap-2">
            <!-- Datatable Info -->
            <div id="datatableCounterInfo" style="display: none;">
                <div class="d-flex align-items-center">
                    <span class="fs-5 me-3">
                        <span id="datatableCounter">0</span>
                        Selected
                    </span>
                    <a class="btn btn-outline-danger btn-sm" href="javascript:;">
                        <i class="bi-trash"></i> Delete
                    </a>
                </div>
            </div>
            <!-- End Datatable Info -->
            <!-- Dropdown -->
            <div class="dropdown">
                <button type="button" class="btn btn-white w-100" id="showHideDropdown" data-bs-toggle="dropdown" aria-expanded="false" data-bs-auto-close="outside">
                    <i class="bi-table me-1"></i> Columns <span class="badge bg-soft-dark text-dark rounded-circle ms-1">5</span>
                </button>

                <div class="dropdown-menu dropdown-menu-end dropdown-card" aria-labelledby="showHideDropdown" style="width: 15rem;">
                    <div class="card card-sm">
                        <div class="card-body">
                            <div class="d-grid gap-3">
                                <!-- Form Switches for Columns -->
                                @* Repeat similar blocks for each column *@
                                <label class="row form-check form-switch" for="toggleColumn_name">
                                    <span class="col-8 col-sm-9 ms-0">
                                        <span class="me-2">Name</span>
                                    </span>
                                    <span class="col-4 col-sm-3 text-end">
                                        <input type="checkbox" class="form-check-input toggle-column" data-column="name" id="toggleColumn_name" checked>
                                    </span>
                                </label>
                                <!-- Repeat for other columns like Email, Phone, etc. -->
                                <label class="row form-check form-switch" for="toggleColumn_email">
                                    <span class="col-8 col-sm-9 ms-0">
                                        <span class="me-2">E-mail</span>
                                    </span>
                                    <span class="col-4 col-sm-3 text-end">
                                        <input type="checkbox" class="form-check-input toggle-column" data-column="email" id="toggleColumn_email" checked>
                                    </span>
                                </label>
                                <!-- Add more as needed -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- End Dropdown -->
        </div>
    </div>
    <style>
        .table-responsive {
            overflow: visible !important; /* Allow the dropdown to display properly */
        }

    </style>
    <!-- Table -->
    <div class="table-responsive datatable-custom">
        <table id="datatable" class="table table-lg table-borderless table-thead-bordered table-nowrap table-align-middle card-table" data-hs-datatables-options='{
                   "columnDefs": [{
                      "targets": [0],
                      "orderable": false
                    }],
                   "order": [],
                   "info": {
                     "totalQty": "#datatableWithPaginationInfoTotalQty"
                   },
                   "search": "#datatableSearch",
                   "entries": "#datatableEntries",
                   "pageLength": 15,
                   "isResponsive": false,
                   "isShowPaging": false,
                   "pagination": "datatablePagination"
                 }'>
            <thead class="thead-light">
                <tr>
                    <th>Code</th>
                    <th>Customer</th>
                    <th>Sub Total</th>
                    <th>Discount</th>
                    <th>Total</th>
                    <th>Date</th>
                    <th>Sale Invoice</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var salesOrder in Model)
                {
                    <tr data-so-id="@salesOrder.Id" class="@(salesOrder.IsSIExist ? "bg-soft-primary" : "")">
                        <td>@salesOrder.SOCode</td>
                        <td>@salesOrder.CustomerName</td>
                        <td>@salesOrder.SOSubTotal</td>
                        <td>@salesOrder.SODiscount</td>
                        <td>@salesOrder.SOTotal</td>
                        <td>@salesOrder.SODate.ToString("MMM dd, yyyy")</td>
                        <td>
                            @if (salesOrder.IsSIExist)
                            {
                                <span class="badge bg-soft-success text-success">
                                    <span class="legend-indicator bg-success"></span> Yes
                                </span>
                            }
                            else
                            {
                                <span class="badge bg-soft-danger text-danger">
                                    <span class="legend-indicator bg-danger"></span> No
                                </span>
                            }
                        </td>
                        <td>
                            @if (salesOrder.Active)
                            {
                                <span class="badge bg-soft-success text-success">
                                    <span class="legend-indicator bg-success"></span> Active
                                </span>
                            }
                            else
                            {
                                <span class="badge bg-soft-secondary text-secondary">
                                    <span class="legend-indicator bg-secondary"></span> Inactive
                                </span>
                            }
                        </td>
                        <td>
                            <div class="btn-group" role="group">
                                <a class="btn btn-white btn-sm" asp-action="Edit" asp-route-id="@salesOrder.Id" title="Edit">
                                    <i class="bi-pencil-fill me-1"></i> Edit
                                </a>

                                <div class="btn-group">
                                    <button type="button" class="btn btn-white btn-icon btn-sm dropdown-toggle dropdown-toggle-empty" id="productsEditDropdown@(salesOrder.Id)" data-bs-toggle="dropdown" aria-expanded="false"></button>
                                    <div class="dropdown-menu dropdown-menu-end mt-1" aria-labelledby="productsEditDropdown@(salesOrder.Id)">
                                        <a class="dropdown-item" asp-action="Delete" asp-route-id="@salesOrder.Id" title="Delete">
                                            <i class="bi-trash dropdown-item-icon"></i> Delete
                                        </a>
                                        <a class="dropdown-item" asp-action="Details" asp-route-id="@salesOrder.Id" title="Details">
                                            <i class="bi-eye dropdown-item-icon"></i> View
                                        </a>
                                        <a class="dropdown-item" asp-action="DetailsPrint" asp-route-id="@salesOrder.Id" title="DetailsPrint">
                                            <i class="bi-eye dropdown-item-icon"></i> Print
                                        </a>

                                        <div class="dropdown-divider"></div>
                                        @if (!salesOrder.IsSIExist)
                                        {
                                            <a href="#" class="dropdown-item generate-invoice" data-so-id="@salesOrder.Id" title="Generate Invoice">
                                                <i class="bi-plus-circle dropdown-item-icon"></i> Generate Invoice
                                            </a>
                                        }
                                        else
                                        {
                                            <a href="#" class="dropdown-item goto-invoice" data-so-id="@salesOrder.Id" title="Goto Invoice">
                                                <i class="bi-box-arrow-up-left dropdown-item-icon"></i> Goto Invoice
                                            </a>
                                        }
                                    </div>
                                </div>

                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination and Footer -->
    <div class="card-footer">
        <div class="row justify-content-center justify-content-sm-between align-items-sm-center">
            <div class="col-sm mb-2 mb-sm-0">
                <div class="d-flex justify-content-center justify-content-sm-start align-items-center">
                    <span class="me-2">Showing:</span>

                    <!-- Select -->
                    <div class="tom-select-custom">
                        <select id="datatableEntries" class="js-select form-select form-select-borderless w-auto" autocomplete="off" data-hs-tom-select-options='{
                            "searchInDropdown": false,
                            "hideSearch": true
                          }'>
                            <option value="10">10</option>
                            <option value="15" selected>15</option>
                            <option value="20">20</option>
                        </select>
                    </div>
                    <span class="text-secondary me-2">of</span>
                    <span id="datatableWithPaginationInfoTotalQty"></span>
                </div>
            </div>

            <div class="col-sm-auto">
                <div class="d-flex justify-content-center justify-content-sm-end">
                    <!-- Pagination -->
                    <nav id="datatablePagination" aria-label="Activity pagination"></nav>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Additional Scripts -->
<script>
    function toggleLock(id, isChecked) {
        // Perform an AJAX call to update the isLock status
        $.ajax({
            url: '/Admin/FinancialYear/ToggleLock', // Define the correct route in your controller
            method: 'POST',
            data: {
                id: id,
                isLock: isChecked
            },
            success: function (response) {
                if (response.success) {
                    alert('Lock status updated successfully.');
                } else {
                    alert('Failed to update lock status.');
                }
            },
            error: function () {
                alert('Error performing the update.');
            }
        });
    }
</script>

<!-- JS CompanySelect -->
<script src="~/FrontentJs/dropdowns/companyselect.js"></script>

@section scripts {
    <!-- Initialization Scripts for Front Dashboard -->
    <script>
        (function () {
            window.onload = function () {
                // INITIALIZATION OF NAVBAR VERTICAL ASIDE
                // =======================================================
                new HSSideNav('.js-navbar-vertical-aside').init()

                // INITIALIZATION OF FORM SEARCH
                // =======================================================
                new HSFormSearch('.js-form-search')

                // INITIALIZATION OF BOOTSTRAP DROPDOWN
                // =======================================================
                HSBsDropdown.init()

                // INITIALIZATION OF SELECT
                // =======================================================
                HSCore.components.HSTomSelect.init('.js-select')

                // INITIALIZATION OF ADD FIELD
                // =======================================================
                new HSAddField('.js-add-field', {
                    addedField: field => {
                        HSCore.components.HSTomSelect.init(field.querySelector('.js-select-dynamic'))
                        HSCore.components.HSMask.init(field.querySelector('.js-input-mask'))
                    }
                })

                // INITIALIZATION OF INPUT MASK
                // =======================================================
                HSCore.components.HSMask.init('.js-input-mask')

                // INITIALIZATION CompanySelect
                // =======================================================
                var companyId = '@companyId';
                initializeCompanySelect(companyId);
            }
        })()
    </script>

    <script type="module">
        import { ContextMenuTable } from '/Frontentjs/dynamicComponents/dynamicContextMenu.js';

        const MenuItems = [
            {
                id: 'editSO',
                iconClass: 'bi-pencil-fill text-primary fw-bolder',
                label: 'Edit',
                action: 'editSO',
                actionUrl: '/Inventory/SO/Edit',
                method: 'GET',
                showIfExists: true,
                showIfNotExists: true,
                isJsonFetchRequest: false,
                isHidden: false,
                isConfirmationAllow: false,
                keyName: '',
                isContainKey: false
            },
            // {
            //     id: 'deleteSO',
            //     iconClass: 'bi-trash text-danger fw-bolder',
            //     label: 'Delete',
            //     action: 'deleteSO',
            //     actionUrl: '/Inventory/SO/Delete',
            //     method: 'POST',
            //     showIfExists: true,
            //     showIfNotExists: true,
            //     isJsonFetchRequest: false,
            //     isHidden: false,
            //     isConfirmationAllow: false
            // },
            // {
            //     id: 'viewSO',
            //     iconClass: 'bi-eye text-info fw-bolder',
            //     label: 'View',
            //     action: 'viewSO',
            //     actionUrl: '/Inventory/SO/Detail',
            //     method: 'GET',
            //     showIfExists: true,
            //     showIfNotExists: true,
            //     isJsonFetchRequest: false,
            //     isHidden: false,
            //     isConfirmationAllow: false,
            //     keyName: '',
            //     isContainKey: false
            // },
            {
                id: 'createSI',
                iconClass: 'bi-plus-circle text-success fw-bolder',
                label: 'Generate Invoice',
                action: 'createSI',
                actionUrl: '/Inventory/SO/GenerateSI',
                method: 'POST',
                showIfNotExists: true,
                isJsonFetchRequest: true,
                isHidden: false,
                isConfirmationAllow: true,
                keyName: 'soId',
                isContainKey: true
            },
            {
                id: 'openSI',
                iconClass: 'bi-box-arrow-up-left text-success fw-bolder',
                label: 'Goto Invoice',
                action: 'openSI',
                actionUrl: '/Inventory/SO/GotoDetailSI',
                method: 'GET',
                showIfExists: true,
                isJsonFetchRequest: true,
                isHidden: false,
                isConfirmationAllow: false,
                keyName: 'id',
                isContainKey: false
            },
            {
                id: 'editSI',
                iconClass: 'bi-pencil-fill text-primary fw-bolder',
                label: 'Edit Invoice',
                action: 'editSI',
                actionUrl: '/Inventory/SO/GotoEditSI',
                method: 'GET',
                showIfExists: true,
                showIfNotExists: false,
                isJsonFetchRequest: true,
                isHidden: true,
                isConfirmationAllow: false,
                keyName: 'soId',
                isContainKey: true
            },
            {
                id: 'deleteSI',
                iconClass: 'bi-trash text-danger fw-bolder',
                label: 'Delete Invoice',
                action: 'deleteSI',
                actionUrl: '/Inventory/SO/DeleteSI',
                method: 'POST',
                showIfExists: true,
                showIfNotExists: false,
                isJsonFetchRequest: true,
                isHidden: true,
                isConfirmationAllow: true,
                keyName: 'soId',
                isContainKey: true
            }
        ];

        new ContextMenuTable({
            tableSelector: '#datatable',
            entity: 'SI',
            dataIdAttribute: 'so-id',
            checkExistsUrl: '/Inventory/SO/CheckSIExists',
            menuItems: MenuItems
        });


        //========================== V1 ====================================
        // new ContextMenuTable({
        //     tableSelector: '#datatable', // ID of the Sales Orders table
        //     menuItems: [
        //         {
        //             id: 'createSI',
        //             iconClass: 'bi-plus-circle text-success fw-bolder',
        //             label: 'Generate Invoice',
        //             onClick: async function (selectedRow, selectedData) {
        //                 alert(selectedData.soid);
        //                 try {
        //                     const response = await fetch('/SI/CreateSI', {
        //                         method: 'POST',
        //                         headers: {
        //                             'Content-Type': 'application/json',
        //                             'RequestVerificationToken': this.getAntiForgeryToken()
        //                         },
        //                         body: JSON.stringify({ soId: selectedData.soid }) // assuming data-so-id
        //                     });

        //                     const result = await response.json();
        //                     if (result.success) {
        //                         notyf.success('SI created successfully!');
        //                         selectedRow.classList.add('highlight-row');
        //                     } else {
        //                         notyf.error({
        //                             message: result.message || 'Failed to create SI.',
        //                             duration: 2000
        //                         });
        //                     }
        //                 } catch (error) {
        //                     console.error('Error creating SI:', error);
        //                     notyf.error('An error occurred while creating SI.');
        //                 }
        //             }
        //         },
        //         {
        //             id: 'openSI',
        //             iconClass: 'bi-box-arrow-up-left text-success fw-bolder',
        //             label: 'Goto Invoice',
        //             onClick: async function (selectedRow, selectedData) {
        //                 try {
        //                     const response = await fetch(`/SI/GetSIUrl?soId=${selectedData.soid}`, {
        //                         method: 'GET',
        //                         headers: {
        //                             'Content-Type': 'application/json'
        //                         }
        //                     });

        //                     const result = await response.json();
        //                     if (result.success && result.siUrl) {
        //                         window.open(result.siUrl, '_blank');
        //                     } else {
        //                         notyf.error(result.message || 'SI does not exist.');
        //                     }
        //                 } catch (error) {
        //                     console.error('Error opening SI:', error);
        //                     notyf.error('An error occurred while opening SI.');
        //                 }
        //             }
        //         },
        //         {
        //             id: 'deleteSI',
        //             iconClass: 'bi-trash text-danger fw-bolder',
        //             label: 'Delete Invoice ',
        //             onClick: async function (selectedRow, selectedData) {
        //                 try {
        //                     const response = await fetch('/SI/DeleteSI', {
        //                         method: 'POST',
        //                         headers: {
        //                             'Content-Type': 'application/json',
        //                             'RequestVerificationToken': this.getAntiForgeryToken()
        //                         },
        //                         body: JSON.stringify({ soId: selectedData.soid })
        //                     });

        //                     const result = await response.json();
        //                     if (result.success) {
        //                         notyf.success('SI deleted successfully!');
        //                         selectedRow.classList.remove('highlight-row');
        //                     } else {
        //                         notyf.error({
        //                             message: result.message || 'Failed to delete SI.',
        //                             duration: 2000
        //                         });
        //                     }
        //                 } catch (error) {
        //                     console.error('Error deleting SI:', error);
        //                     notyf.error('An error occurred while deleting SI.');
        //                 }
        //             }
        //         }
        //     ],
        //     prepareMenu: function (selectedData, contextMenuInstance) {
        //         alert();
        //         console.log(contextMenuInstance)
        //         console.log(selectedData)
        //         console.log(selectedData.siexists)
        //         if (selectedData.siexists === 'false' || selectedData.siexists === true) {
        //             // Invoice exists: Show "Goto Invoice" and "Delete Invoice"
        //             contextMenuInstance.showMenuItem('openSI');
        //             contextMenuInstance.showMenuItem('deleteSI');
        //             // Hide "Generate Invoice"
        //             contextMenuInstance.hideMenuItem('createSI');
        //          } else {
        //             // Invoice does not exist: Show "Generate Invoice"
        //             contextMenuInstance.showMenuItem('createSI');
        //             // Hide "Goto Invoice" and "Delete Invoice"
        //             contextMenuInstance.hideMenuItem('openSI');
        //             contextMenuInstance.hideMenuItem('deleteSI');
        //         }

        //         // After preparation, show the menu at the last recorded mouse position
        //         contextMenuInstance.showContextMenu(this.lastMouseX, this.lastMouseY);
        //     }
        // });

    </script>
}



