@model SRDto

@{
    ViewData["Title"] = @ViewBag.NameOfForm;

    var currentUrl = Context.Request.Path.ToString();
    var tenantId = Context.TenantId();
    var companyId = Context.CompanyId();
    var isTenantAdmin = Context.IsTenantAdmin();

    // Create JSON for product options
    var productOptions = Newtonsoft.Json.JsonConvert.SerializeObject(
        Model.ProductDtos.Select(x => new
        {
            value = x.Id,
            text = x.ProductName,
            unitPrice = x.ProductPrice,
            stock = x.Stock
        })
    );

    // Create JSON for tax master
    var taxMasterJson = Newtonsoft.Json.JsonConvert.SerializeObject(Model.TaxMasterDtos);

    // Prefilled lines (SRDtlDtos)
    var prefilledVoucher = Newtonsoft.Json.JsonConvert.SerializeObject(Model.SRDtlDtos);

    // Prefilled tax lines (SRDtlTaxDtos)
    var prefilledTaxMaster = Newtonsoft.Json.JsonConvert.SerializeObject(Model.SRDtlTaxDtos);
}

<div class="page-header">
    <div class="row align-items-center">
        <div class="col-sm mb-2 mb-sm-0">
            <h1 class="page-header-title">Details @ViewBag.NameOfForm</h1>
        </div>
    </div>
</div>

@if (!ViewData.ModelState.IsValid)
{
    foreach (var state in ViewData.ModelState)
    {
        if (state.Value.Errors.Count > 0)
        {
            foreach (var error in state.Value.Errors)
            {
                <script>
                    notyf.error({
                        message: '@error.ErrorMessage',
                        duration: 10000 // 10 seconds
                    });
                </script>
            }
        }
    }
}

<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <!-- Body -->
            <div class="card-body">
                <form method="post" enctype="multipart/form-data">
                    <input type="hidden" asp-for="Id" />
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="mb-4">
                                <h5>General Information</h5>
                            </div>
                        </div>

                        <!-- Return Code -->
                        <div class="col-sm-4">
                            <div class="mb-4">
                                <label>Code</label>
                                <div class="js-form-message">
                                    <input type="hidden" asp-for="SRCode" />
                                    <input type="text"
                                           class="form-control"
                                           asp-for="SRCode"
                                           required
                                           data-msg="Code is Required."
                                           disabled />
                                    <span class="invalid-feedback">Code is Required.</span>
                                </div>
                            </div>
                        </div>

                        <!-- Return Date -->
                        <div class="col-sm-4">
                            <div class="mb-4">
                                <label asp-for="SRDate">Date</label>
                                <input type="text" asp-for="SRDate" class="form-control" disabled />
                                <span asp-validation-for="SRDate" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- Customer ID -->
                        <div class="col-sm-4">
                            <div class="mb-4">
                                <label asp-for="CustomerId">Customer</label>
                                <div class="tom-select-custom">
                                    <select class="js-select form-select"
                                            asp-for="CustomerId"
                                            asp-items="@(new SelectList(Model.CustomerDtos, "Id", "Name"))"
                                            autocomplete="off"
                                            disabled
                                            data-hs-tom-select-options='{"placeholder": "--- Select Customer ---"}'>
                                        <option value="0">--- Select Customer ---</option>
                                    </select>
                                </div>
                                <span asp-validation-for="CustomerId" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- Linked Sale Invoice -->
                        <div class="col-sm-4">
                            <div class="mb-4">
                                <label asp-for="SIId">Sale Invoice</label>
                                <div class="tom-select-custom">
                                    <select class="js-select form-select"
                                            asp-for="SIId"
                                            asp-items="@(new SelectList(Model.SIDtos, "Id", "SICode"))"
                                            autocomplete="off"
                                            disabled
                                            data-hs-tom-select-options='{"placeholder": "--- Select Sale Invoice ---"}'>
                                        <option value="0">--- Select Sale Invoice ---</option>
                                    </select>
                                </div>
                                <span asp-validation-for="SIId" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- Product / Service Table -->
                        <div class="col-sm-12">
                            <div class="mb-4">
                                <div class="card">
                                    <div class="card-header d-flex justify-content-between align-items-center">
                                        <h5 class="card-title">Product / Service</h5>
                                        @* <button id="addRowBtn" class="btn btn-soft-primary">
                                        <i class="bi-plus"></i> Add
                                        </button> *@
                                    </div>
                                    <div class="card-body" id="soCreateContainer">
                                        <div class="table-responsive">
                                            <table class="table align-middle table-nowrap" id="productTable">
                                                <thead class="thead-light">
                                                    <tr>
                                                        <th width="30%">Product</th>
                                                        <th>Current Stock</th>
                                                        <th>Unit Price</th>
                                                        <th width="10%">Quantity</th>
                                                        <th>Price</th>
                                                        <th>Price After VAT</th>
                                                        <th>Actions</th>
                                                    </tr>
                                                </thead>
                                                <tbody id="productTableBody">
                                                    <!-- Dynamic rows will be inserted here -->
                                                </tbody>
                                                <tfoot style="text-align:center">
                                                    <tr>
                                                        <td colspan="7" style="text-align: center;">
                                                            <button id="addRowBtn" class="btn btn-soft-primary">
                                                                <i class="bi-plus"></i>
                                                            </button>
                                                        </td>
                                                    </tr>
                                                </tfoot>
                                            </table>
                                        </div>

                                        <!-- Total Summary -->
                                        <div class="mt-4">
                                            <div class="card">
                                                <div class="card-body">
                                                    <div class="row">
                                                        <div class="col text-end">
                                                            <span class="badge bg-soft-primary text-primary fs-5">Total Quantity:</span>
                                                            <span id="totalQuantity" class="text-dark fs-5 fw-bold">0</span>
                                                        </div>
                                                        <div class="col text-end">
                                                            <span class="badge bg-soft-info text-info fs-5">Total Per Piece Price:</span>
                                                            <span id="totalPerPiecePrice" class="text-dark fs-5 fw-bold">0.00</span>
                                                        </div>
                                                        <div class="col text-end">
                                                            <span class="badge bg-soft-warning text-warning fs-5">Total Unit Price:</span>
                                                            <span id="totalUnitPrice" class="text-dark fs-5 fw-bold">0.00</span>
                                                        </div>
                                                        <div class="col text-end">
                                                            <span class="badge bg-soft-success text-success fs-5">Total Price:</span>
                                                            <span id="grandTotal" class="text-dark fs-5 fw-bold">0.00</span>
                                                        </div>
                                                    </div>
                                                    <hr />
                                                    <!-- VAT breakdown row -->
                                                    <div class="row mt-3" id="vatBreakdownRow"></div>
                                                    <!-- Hidden VAT breakdown inputs for model binding -->
                                                    <div id="vatBreakdownHiddenContainer" style="display:none;"></div>
                                                </div>
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Finalization -->
                        <div class="row d-flex justify-content-center">
                            <div class="col-sm-3">
                                <div class="mb-4">
                                    <label asp-for="SRSubTotal">SubTotal</label>
                                    <div class="js-form-message">
                                        <input type="hidden" asp-for="SRSubTotal" class="form-control subtotal-hidden" />
                                        <input asp-for="SRSubTotal"
                                               class="form-control subtotal-visible"
                                               disabled
                                               data-msg="Subtotal is required." />
                                        <span class="invalid-feedback">Please provide a valid subtotal.</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Discount -->
                            <div class="col-sm-3">
                                <div class="mb-4">
                                    <label asp-for="SRDiscount">Discount</label>
                                    <div class="js-form-message">
                                        <input asp-for="SRDiscount"
                                               class="form-control discount-input"
                                               disabled
                                               data-msg="Discount cannot exceed subtotal." />
                                        <span class="invalid-feedback">Please provide a valid discount.</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Total -->
                            <div class="col-sm-3">
                                <div class="mb-4">
                                    <label asp-for="SRTotal">Total</label>
                                    <div class="js-form-message">
                                        <input type="hidden" asp-for="SRTotal" class="form-control total-hidden" />
                                        <input asp-for="SRTotal"
                                               class="form-control total-visible"
                                               disabled
                                               data-msg="Total is required." />
                                        <span class="invalid-feedback">Please provide a valid total.</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Total After VAT -->
                            <div class="col-sm-3">
                                <div class="mb-4">
                                    <label for="SRTotalAfterVAT">Total (After VAT)</label>
                                    <div class="js-form-message">
                                        <input type="hidden" asp-for="SRTotalAfterVAT" class="form-control totalVat-hidden" />
                                        <input type="text"
                                               asp-for="SRTotalAfterVAT"
                                               class="form-control totalVat-Visible"
                                               disabled
                                               value="0.00" />
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>

                    <!-- Form buttons -->
                    <div class="d-flex justify-content-left gap-3 mt-3">
                        <a asp-action="Index" class="btn btn-primary" id="bt">Cancel</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<style>
    /* Fix for dropdown overflow in the table */
    .tom-select-dropdown {
        z-index: 1050 !important; /* Ensure dropdown appears above other elements */
    }

    .table-responsive {
        overflow: visible !important; /* Allow the dropdown to display properly */
    }
</style>

<!-- JS CompanySelect -->
<script src="~/FrontentJs/dropdowns/companyselect.js"></script>

@section scripts {

    <script>
        (function () {
            window.onload = function () {


                // INITIALIZATION OF NAVBAR VERTICAL ASIDE
                // =======================================================
                new HSSideNav('.js-navbar-vertical-aside').init()


                // INITIALIZATION OF FORM SEARCH
                // =======================================================
                new HSFormSearch('.js-form-search')


                // INITIALIZATION OF BOOTSTRAP DROPDOWN
                // =======================================================
                HSBsDropdown.init()


                // INITIALIZATION OF SELECT
                // =======================================================
                HSCore.components.HSTomSelect.init('.js-select')


                // INITIALIZATION OF ADD FIELD
                // =======================================================
                new HSAddField('.js-add-field', {
                    addedField: field => {
                        HSCore.components.HSTomSelect.init(field.querySelector('.js-select-dynamic'))
                        HSCore.components.HSMask.init(field.querySelector('.js-input-mask'))
                    }
                })


                // INITIALIZATION OF INPUT MASK
                // =======================================================
                HSCore.components.HSMask.init('.js-input-mask')


                // INITIALIZATION CompanySelect
                // =======================================================
                var companyId = '@companyId';
                initializeCompanySelect(companyId);
            }
        })()
    </script>


    <script>
        (function () {
            // INITIALIZATION OF FORM VALIDATION
            // =======================================================
            HSBsValidation.init('.js-validate');

            // Additional Validation for Products
            const form = document.getElementById('productForm');
            form.addEventListener('submit', function (event) {
                //event.preventDefault();
                const rows = document.querySelectorAll("#productTableBody tr");
                if (rows.length === 0) {
                    event.preventDefault();
                    notyf.error({
                        message: "You must add at least one product.",
                        duration: 10000, // 10 seconds
                    });
                    return;
                }

                let isValid = true;

                rows.forEach(row => {
                    const qty = parseFloat(row.querySelector('.product-qty').value) || 0;
                    const total = parseFloat(row.querySelector('.product-total').textContent) || 0;

                    if (qty <= 0 || total <= 0) {
                        isValid = false;
                    }
                });

                // if (!isValid) {
                //     event.preventDefault();
                //     notyf.error({
                //         message: "Each product must have a valid quantity and total price.",
                //         duration: 10000, // 10 seconds
                //     });
                // }
            });
        })();
    </script>

    <script type="module">
        import { AdvancedDynamicTable } from '/Frontentjs/dynamicComponents/dynamicTable.js';

        // -------------------------------------------
        // 1) Prepare Data from Model
        // -------------------------------------------
        let productsData = @Html.Raw(productOptions);            // e.g. [{ value, text, unitPrice, stock }, ...]
        let taxMasterData = @Html.Raw(taxMasterJson);            // e.g. [{id, taxName, taxValue}, ...]
        let prefilledRows = @Html.Raw(prefilledVoucher);         // e.g. SRDtlDtos
        let prefilledTaxMaster = @Html.Raw(prefilledTaxMaster);  // e.g. SRDtlTaxDtos

        // Re-map the real IDs to a "fake" ID if needed
        // -------------------------------------------
        let fakeIdCounter = 1;
        const srDtlIdMap = {};

        prefilledRows.forEach(row => {
            srDtlIdMap[fakeIdCounter] = row.Id;  // real -> fake
            row.Id = fakeIdCounter;              // replace with fake
            fakeIdCounter++;
        });

        // Also update the tax lines to reference these fake IDs
        prefilledTaxMaster.forEach(tax => {
            const fakeId = Object.keys(srDtlIdMap).find(k => srDtlIdMap[k] === tax.SRDtlId);
            if (fakeId) {
                tax.SRDtlId = parseInt(fakeId);
            } else {
                console.warn(`No fakeId found for SRDtlId: ${tax.SRDtlId}. This tax record will be skipped.`);
            }
        });

        // -------------------------------------------
        // 2) Name attributes for SRDtlDtos
        //    (So model binding can work properly)
        // -------------------------------------------
        const srNameAttributes = {
            base: "@nameof(Model.SRDtlDtos)",
            productId: "@nameof(SRDtlDto.ProductId)",
            quantity: "@nameof(SRDtlDto.SRDtlQty)",
            unitPrice: "@nameof(SRDtlDto.SRDtlPrice)",
            total: "@nameof(SRDtlDto.SRDtlTotal)",
            afterVAT: "@nameof(SRDtlDto.SRDtlTotalAfterVAT)" // Make sure your SRDtlDto has this property
        };

        // -------------------------------------------
        // 3) Instantiate the AdvancedDynamicTable
        // -------------------------------------------
        let advancedDynamicTableInstance = new AdvancedDynamicTable(
            "productTableBody",
            "addRowBtn",
            {
                productsData,
                prefilledRows,
                taxMasterData,
                prefilledTaxMaster,

                // For tax references and breakdown
                taxDetailCollectionName: "SRDtlTaxDtos",
                vatBreakdownCollectionName: "SRVATBreakdownDtos",
                detailIdFieldName: "SRDtlId",
                docIdFieldName: "SRId",

                // IDs for your main summary fields
                subtotalId: "SRSubTotal",
                totalId: "SRTotal",
                discountId: "SRDiscount",

                // Let the table handle discount
                isDiscountAllowed: true,

                // Mode / config
                isEditMode: true,
                mode: 'detail',
                editTemplateType: 'Template_1',

                // Field mapping so the table recognizes fields
                unitPriceFields: ['unitprice', 'productprice', 'price'],
                stockFields: ['stock', 'currentstock', 'quantityinstock'],
                quantityFields: ['srdtlqty', 'quantity', 'qty']
            },
            srNameAttributes
        );

        // -------------------------------------------
        // 4) On change of Sale Invoice (SIId),
        //    fetch lines & re-map them for SR
        // -------------------------------------------
        const invoiceDropdown = document.getElementById("SIId");
        const customerDropdown = document.getElementById("CustomerId");

        // Wait for TomSelect to initialize
        await new Promise((resolve) => {
            const observer = new MutationObserver((mutations, obs) => {
                if (invoiceDropdown.tomselect) {
                    obs.disconnect();
                    resolve();
                }
            });
            observer.observe(invoiceDropdown, { attributes: true, childList: false, subtree: false });
        });

        const siTomSelectInstance = invoiceDropdown.tomselect;
        siTomSelectInstance.on("change", async function (selectedValue) {
            const tomCustomerInstance = customerDropdown.tomselect;
            if (!selectedValue || selectedValue === "0") {
                console.log("No Sale Invoice selected. Resetting table.");

                // Optionally reset customer
                if (tomCustomerInstance) {
                    tomCustomerInstance.clear();
                }

                // Clear the table
                advancedDynamicTableInstance.updateData({
                    productsData,
                    prefilledRows: [],
                    prefilledTaxMaster: [],
                    taxMasterData,
                    taxDetailCollectionName: "SRDtlTaxDtos",
                    vatBreakdownCollectionName: "SRVATBreakdownDtos",
                    detailIdFieldName: "SRDtlId",
                    docIdFieldName: "SRId",
                    subtotalId: "SRSubTotal",
                    totalId: "SRTotal",
                    discountId: "SRDiscount",
                    isDiscountAllowed: true,
                    isEditMode: false,
                    mode: 'detail',
                    editTemplateType: 'Template_1',
                    unitPriceFields: ['productprice', 'unitprice', 'price'],
                    stockFields: ['currentstock', 'stock', 'quantityinstock'],
                    quantityFields: ['srdtlqty', 'quantity', 'qty']
                },
                    srNameAttributes);

                return;
            }

            try {
                // Fetch the Sale Invoice by ID
                const response = await fetch(`/Inventory/SI/GetSIById?id=${selectedValue}`);
                if (!response.ok) {
                    throw new Error(`Error: ${response.status} - ${response.statusText}`);
                }
                const result = await response.json();

                if (!result.success) {
                    console.error("Failed to load Sale Invoice data:", result.message);
                    return;
                }

                const siData = result.data; // { siDtlDtos, siDtlTaxDtos, customerId, ... }
                const { siDtlDtos, siDtlTaxDtos, customerId } = siData;

                // Set the customer
                tomCustomerInstance.setValue(customerId);

                // Map the SI lines to SR lines
                // Example: rename fields from si -> sr
                const mappingObject = (lines, srId) =>
                    lines.map(x => ({
                        Id: x.id,
                        SRId: srId,
                        ProductId: x.productId,
                        SRDtlQty: x.siDtlQty,
                        SRDtlPrice: x.siDtlPrice,
                        SRDtlTotal: x.siDtlTotal,
                        SRDtlTotalAfterVAT: x.siDtlTotalAfterVAT // if present
                    }));

                const mappedVoucher = mappingObject(siDtlDtos, selectedValue);

                // Now handle the tax lines in a similar manner
                // rename SI -> SR references
                const mappingTaxObject = (taxLines, srId) =>
                    taxLines.map(tax => ({
                        Id: tax.id,
                        SRId: srId,
                        SRDtlId: tax.siDtlId, // We'll replace with a new fake ID below
                        TaxId: tax.taxId,
                        TaxAmount: tax.taxAmount,
                        AfterTaxAmount: tax.afterTaxAmount
                    }));

                const mappedTaxLines = mappingTaxObject(siDtlTaxDtos, selectedValue);

                // Assign new "fake" IDs for these lines
                let newFakeCounter = 1;
                const srIdMap = {};
                mappedVoucher.forEach(line => {
                    srIdMap[newFakeCounter] = line.Id; // real => fake
                    line.Id = newFakeCounter;
                    newFakeCounter++;
                });

                // Update the tax lines to match these new fakes
                mappedTaxLines.forEach(taxLine => {
                    const matchedFakeId = Object.keys(srIdMap).find(k => srIdMap[k] === taxLine.SRDtlId);
                    if (matchedFakeId) {
                        taxLine.SRDtlId = parseInt(matchedFakeId, 10);
                    } else {
                        console.warn(`No fakeId found for SRDtlId: ${taxLine.SRDtlId}. Skipping tax line.`);
                    }
                });

                // Update the table
                advancedDynamicTableInstance.updateData({
                    productsData,
                    prefilledRows: mappedVoucher,
                    prefilledTaxMaster: mappedTaxLines,
                    taxMasterData,

                    // Field + config
                    subtotalId: "SRSubTotal",
                    totalId: "SRTotal",
                    discountId: "SRDiscount",
                    isDiscountAllowed: true,
                    isEditMode: true,
                    mode: 'detail',
                    editTemplateType: 'Template_1',

                    // Tax names
                    taxDetailCollectionName: "SRDtlTaxDtos",
                    vatBreakdownCollectionName: "SRVATBreakdownDtos",
                    detailIdFieldName: "SRDtlId",
                    docIdFieldName: "SRId",

                    // Field mapping
                    unitPriceFields: ['srdtlprice', 'productprice', 'price'],
                    stockFields: ['stock', 'currentstock', 'quantityinstock'],
                    quantityFields: ['srdtlqty', 'quantity', 'qty']
                },
                    srNameAttributes);

            } catch (error) {
                console.error("Error fetching Sale Invoice data:", error);
            }
        });
    </script>
}
