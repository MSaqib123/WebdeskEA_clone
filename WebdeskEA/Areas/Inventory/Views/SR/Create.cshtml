@model SRDto

@{
    ViewData["Title"] = @ViewBag.NameOfForm;

    var currentUrl = Context.Request.Path.ToString();
    var tenantId = Context.TenantId();
    var companyId = Context.CompanyId();
    var isTenantAdmin = Context.IsTenantAdmin();

    // Products JSON
    var productOptions = Newtonsoft.Json.JsonConvert.SerializeObject(
        Model.ProductDtos.Select(x => new
        {
            value = x.Id,
            text = x.ProductName,
            unitPrice = x.ProductPrice,
            stock = x.Stock
        })
    );

    // Tax Master JSON
    var taxMasterJson = Newtonsoft.Json.JsonConvert.SerializeObject(Model.TaxMasterDtos ?? new List<TaxMasterDto>());

    // Prefilled detail lines (usually empty for a new record, but could be set if needed)
    var prefilledVoucher = Newtonsoft.Json.JsonConvert.SerializeObject(Model.SRDtlDtos ?? new List<SRDtlDto>());

    // Prefilled tax detail lines (usually empty for a new record)
    var prefilledTaxMaster = Newtonsoft.Json.JsonConvert.SerializeObject(Model.SRDtlTaxDtos ?? new List<SRDtlTaxDto>());
}


<!--====================== -->
<!-- The Bootstrap modal -->
<!--====================== -->
<div class="modal fade" id="createProductModal" tabindex="-1" aria-labelledby="createProductModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">

            <div class="modal-header">
                <h5 class="modal-title">Create Product</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>

            <div class="modal-body" id="createProductModalBody">
                <div class="text-center text-muted">Loading...</div>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="createCustomerModal" tabindex="-1" aria-labelledby="createCustomerModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">

            <div class="modal-header">
                <h5 class="modal-title">Create Customer</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>

            <div class="modal-body" id="createCustomerModalBody">
                <div class="text-center text-muted">Loading...</div>
            </div>
        </div>
    </div>
</div>




<div class="page-header">
    <div class="row align-items-center">
        <div class="col-sm mb-2 mb-sm-0">
            <h1 class="page-header-title">Add @ViewBag.NameOfForm</h1>
        </div>
    </div>
</div>

@if (!ViewData.ModelState.IsValid)
{
    foreach (var state in ViewData.ModelState)
    {
        if (state.Value.Errors.Count > 0)
        {
            foreach (var error in state.Value.Errors)
            {
                <script>
                    notyf.error({
                        message: '@error.ErrorMessage',
                        duration: 10000 // 10 seconds
                    });
                </script>
            }
        }
    }
}

<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <!-- Body -->
            <div class="card-body">
                <form id="productForm"
                      class="js-validate"
                      asp-action="Create"
                      method="post"
                      enctype="multipart/form-data"
                      novalidate>
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="mb-4">
                                <h5>General Information</h5>
                            </div>
                        </div>

                        <!-- SR Code -->
                        <div class="col-sm-4">
                            <div class="mb-4">
                                <label>Code</label>
                                <div class="js-form-message">
                                    <input type="hidden" asp-for="SRCode" />
                                    <input type="text"
                                           class="form-control"
                                           asp-for="SRCode"
                                           required
                                           data-msg="Code is Required."
                                           disabled />
                                    <span class="invalid-feedback">Code is Required.</span>
                                </div>
                            </div>
                        </div>

                        <!-- SR Date -->
                        <div class="col-sm-4">
                            <div class="mb-4">
                                <label asp-for="SRDate">Date</label>
                                <div class="js-form-message">
                                    <input type="date"
                                           asp-for="SRDate"
                                           class="form-control"
                                           required
                                           data-msg="Please select a valid date." />
                                    <span class="invalid-feedback">Please select a valid date.</span>
                                </div>
                            </div>
                        </div>

                        <!-- Customer -->
                        <div class="col-sm-4">
                            <div class="mb-4">
                                <label asp-for="CustomerId">Customer</label>
                                <div class="input-group tom-select-custom js-form-message">
                                    <select id="CustomerId"
                                            class="js-select form-select"
                                            asp-for="CustomerId"
                                            asp-items="@(new SelectList(Model.CustomerDtos, "Id", "Name"))"
                                            required
                                            data-msg="Please select a customer."
                                            data-hs-tom-select-options='{"placeholder": "--- Select Customer ---"}'>
                                        <option value="">--- Select Customer ---</option>
                                    </select>
                                    <!-- Button appended to the input group -->
                                    <button type="button"
                                            class="btn btn-soft-primary"
                                            data-bs-toggle="modal"
                                            data-bs-target="#createCustomerModal">
                                        <i class="bi-plus"></i>
                                    </button>
                                </div>
                                <span class="invalid-feedback">Please select a valid customer.</span>
                            </div>
                        </div>

                        <!-- Linked Sale Invoice -->
                        <div class="col-sm-4">
                            <div class="mb-4">
                                <label asp-for="SIId">Sale Invoice</label>
                                <div class="tom-select-custom">
                                    <select class="js-select form-select"
                                            asp-for="SIId"
                                            asp-items="@(new SelectList(Model.SIDtos, "Id", "SICode"))"
                                            autocomplete="off"
                                            data-hs-tom-select-options='{"placeholder": "--- Select Sale Invoice ---"}'>
                                        <option value="0">--- Select Sale Invoice ---</option>
                                    </select>
                                </div>
                                <span asp-validation-for="SIId" class="text-danger"></span>
                            </div>
                        </div>


                        <!-- Product / Service Table -->
                        <div class="col-sm-12">
                            <div class="mb-4">
                                <div class="card">
                                    <div class="card-header d-flex justify-content-between align-items-center">
                                        <h5 class="card-title">Product / Service</h5>
                                        <button type="button" class="btn btn-soft-primary" data-bs-toggle="modal" data-bs-target="#createProductModal">
                                            <i class="bi-plus"></i> New Product
                                        </button>
                                    </div>
                                    <div class="card-body" id="soCreateContainer">
                                        <div class="table-responsive">
                                            <table class="table align-middle table-nowrap" id="productTable">
                                                <thead class="thead-light">
                                                    <tr>
                                                        <th width="25%">Product</th>
                                                        <th>Current Stock</th>
                                                        <th>Unit Price</th>
                                                        <th width="10%">Quantity</th>
                                                        <th>Price</th>
                                                        <th>Price After VAT</th>
                                                        <th>Actions</th>
                                                    </tr>
                                                </thead>
                                                <tbody id="productTableBody">
                                                    <!-- Dynamic rows will be inserted here -->
                                                </tbody>
                                                <tfoot style="text-align:center">
                                                    <tr>
                                                        <td colspan="7" style="text-align: center;">
                                                            <button id="addRowBtn" class="btn btn-soft-primary">
                                                                <i class="bi-plus"></i>
                                                            </button>
                                                        </td>
                                                    </tr>
                                                </tfoot>
                                            </table>
                                        </div>

                                        <!-- Total Summary -->
                                        <div class="mt-4">
                                            <div class="card">
                                                <div class="card-body">
                                                    <div class="row">
                                                        <div class="col text-end">
                                                            <span class="badge bg-soft-primary text-primary fs-5">Total Quantity:</span>
                                                            <span id="totalQuantity" class="text-dark fs-5 fw-bold">0</span>
                                                        </div>
                                                        <div class="col text-end">
                                                            <span class="badge bg-soft-info text-info fs-5">Total Per Piece Price:</span>
                                                            <span id="totalPerPiecePrice" class="text-dark fs-5 fw-bold">0.00</span>
                                                        </div>
                                                        <div class="col text-end">
                                                            <span class="badge bg-soft-warning text-warning fs-5">Total Unit Price:</span>
                                                            <span id="totalUnitPrice" class="text-dark fs-5 fw-bold">0.00</span>
                                                        </div>
                                                        <div class="col text-end">
                                                            <span class="badge bg-soft-success text-success fs-5">Total Price:</span>
                                                            <span id="grandTotal" class="text-dark fs-5 fw-bold">0.00</span>
                                                        </div>
                                                    </div>
                                                    <hr />
                                                    <!-- VAT breakdown row -->
                                                    <div class="row mt-3" id="vatBreakdownRow"></div>
                                                    <!-- Hidden VAT breakdown inputs for model binding -->
                                                    <div id="vatBreakdownHiddenContainer" style="display:none;"></div>
                                                </div>
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Finalization -->
                        <div class="row d-flex justify-content-center">
                            <!-- Subtotal -->
                            <div class="col-sm-3">
                                <div class="mb-4">
                                    <label asp-for="SRSubTotal">SubTotal</label>
                                    <div class="js-form-message">
                                        <input type="hidden" asp-for="SRSubTotal" class="form-control subtotal-hidden" />
                                        <input asp-for="SRSubTotal"
                                               class="form-control subtotal-visible"
                                               disabled
                                               required
                                               data-msg="Subtotal is required." />
                                        <span class="invalid-feedback">Please provide a valid subtotal.</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Discount -->
                            <div class="col-sm-3">
                                <div class="mb-4">
                                    <label asp-for="SRDiscount">Discount</label>
                                    <div class="js-form-message">
                                        <input asp-for="SRDiscount"
                                               class="form-control discount-input"
                                               data-msg="Discount cannot exceed subtotal." />
                                        <span class="invalid-feedback">Please provide a valid discount.</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Total -->
                            <div class="col-sm-3">
                                <div class="mb-4">
                                    <label asp-for="SRTotal">Total</label>
                                    <div class="js-form-message">
                                        <input type="hidden" asp-for="SRTotal" class="form-control total-hidden" />
                                        <input asp-for="SRTotal"
                                               class="form-control total-visible"
                                               disabled
                                               required
                                               data-msg="Total is required." />
                                        <span class="invalid-feedback">Please provide a valid total.</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Total (After VAT) -->
                            <div class="col-sm-3">
                                <div class="mb-4">
                                    <label for="SRTotalAfterVAT">Total (After VAT)</label>
                                    <div class="js-form-message">
                                        <input type="hidden" asp-for="SRTotalAfterVAT" class="form-control totalVat-hidden" />
                                        <input type="text"
                                               asp-for="SRTotalAfterVAT"
                                               class="form-control totalVat-Visible"
                                               disabled
                                               value="0.00" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Submit Button -->
                    <div class="d-flex justify-content-left gap-3 mt-3">
                        <button type="submit" class="btn btn-primary me-2" id="submitBtn">Submit</button>
                        <a asp-action="Index" class="btn btn-white" id="bt">Cancel</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<style>
    /* Fix for dropdown overflow in the table */
    .tom-select-dropdown {
        z-index: 1050 !important; /* Ensure dropdown appears above other elements */
    }

    .table-responsive {
        overflow: visible !important; /* Allow the dropdown to display properly */
    }
</style>

<!-- JS CompanySelect -->
<script src="~/FrontentJs/dropdowns/companyselect.js"></script>

@section scripts {

    <script>
        (function () {
            window.onload = function () {
                // INITIALIZATION OF NAVBAR VERTICAL ASIDE
                // =======================================================
                new HSSideNav('.js-navbar-vertical-aside').init()

                // INITIALIZATION OF FORM SEARCH
                // =======================================================
                new HSFormSearch('.js-form-search')

                // INITIALIZATION OF BOOTSTRAP DROPDOWN
                // =======================================================
                HSBsDropdown.init()

                // INITIALIZATION OF SELECT
                // =======================================================
                HSCore.components.HSTomSelect.init('.js-select')

                // INITIALIZATION OF ADD FIELD
                // =======================================================
                new HSAddField('.js-add-field', {
                    addedField: field => {
                        HSCore.components.HSTomSelect.init(field.querySelector('.js-select-dynamic'))
                        HSCore.components.HSMask.init(field.querySelector('.js-input-mask'))
                    }
                })

                // INITIALIZATION OF INPUT MASK
                // =======================================================
                HSCore.components.HSMask.init('.js-input-mask')

                // INITIALIZATION OF CompanySelect
                // =======================================================
                var companyId = '@companyId';
                initializeCompanySelect(companyId);
            }
        })();
    </script>

    <script>
        (function () {
            // INITIALIZATION OF FORM VALIDATION
            // =======================================================
            HSBsValidation.init('.js-validate');

            // Additional validation for product table
            const form = document.getElementById('productForm');
            form.addEventListener('submit', function (event) {
                const rows = document.querySelectorAll("#productTableBody tr");
                if (rows.length === 0) {
                    event.preventDefault();
                    notyf.error({
                        message: "You must add at least one product.",
                        duration: 10000 // 10 seconds
                    });
                    return;
                }

                let isValid = true;
                rows.forEach(row => {
                    const qty = parseFloat(row.querySelector('.product-qty')?.value ?? 0);
                    const total = parseFloat(row.querySelector('.product-total')?.textContent ?? 0);
                    if (qty <= 0 || total <= 0) {
                        isValid = false;
                    }
                });

                // if (!isValid) {
                //     event.preventDefault();
                //     notyf.error({
                //         message: "Each product must have a valid quantity and total price.",
                //         duration: 10000 // 10 seconds
                //     });
                // }
            });
        })();
    </script>

    <script type="module">
        import { AdvancedDynamicTable } from '/Frontentjs/dynamicComponents/dynamicTable.js';

        // ---------------------------------------
        // 1) Prepare data from Model
        // ---------------------------------------
        let productsData = @Html.Raw(productOptions);
        let taxMasterData = @Html.Raw(taxMasterJson);
        let prefilledRows = @Html.Raw(prefilledVoucher);
        let prefilledTaxMaster = @Html.Raw(prefilledTaxMaster);

        // For a new SR, we typically won't have real existing lines. But if so,
        // we can do the "fake ID" mapping approach:
        let fakeIdCounter = 1;
        const srDtlIdMap = {};

        prefilledRows.forEach(row => {
            srDtlIdMap[fakeIdCounter] = row.Id; // real -> fake
            row.Id = fakeIdCounter;
            fakeIdCounter++;
        });

        prefilledTaxMaster.forEach(tax => {
            const fakeId = Object.keys(srDtlIdMap).find(k => srDtlIdMap[k] === tax.SRDtlId);
            if (fakeId) {
                tax.SRDtlId = parseInt(fakeId, 10);
            } else {
                console.warn(`No fakeId found for SRDtlId: ${tax.SRDtlId}. Skipping tax line.`);
            }
        });

        // ---------------------------------------
        // 2) Name attributes for SRDtl
        // ---------------------------------------
        const srNameAttributes = {
            base: "@nameof(@Model.SRDtlDtos)",
            productId: "@nameof(SRDtlDto.ProductId)",
            quantity: "@nameof(SRDtlDto.SRDtlQty)",
            unitPrice: "@nameof(SRDtlDto.SRDtlPrice)",
            total: "@nameof(SRDtlDto.SRDtlTotal)",
            afterVAT: "@nameof(SRDtlDto.SRDtlTotalAfterVAT)" // If your SRDtlDto includes this property
        };

        // ---------------------------------------
        // 3) Initialize the dynamic table
        // ---------------------------------------
        let advancedDynamicTableInstance = new AdvancedDynamicTable(
            "productTableBody",
            "addRowBtn",
            {
                productsData: productsData,
                taxMasterData: taxMasterData,
                prefilledRows: prefilledRows,
                prefilledTaxMaster: prefilledTaxMaster,

                taxDetailCollectionName: "SRDtlTaxDtos",
                vatBreakdownCollectionName: "SRVATBreakdownDtos",
                detailIdFieldName: "SRDtlId",
                docIdFieldName: "SRId",

                // IDs for main summary fields
                subtotalId: "SRSubTotal",
                totalId: "SRTotal",
                discountId: "SRDiscount",

                // Let the table handle discount logic
                isDiscountAllowed: true,

                // Since this is create, no existing lines (or you can set true if editing)
                isEditMode: false,
                mode: 'create',
                editTemplateType: 'Template_1',

                // Field identification
                unitPriceFields: ['unitprice', 'productprice', 'price'],
                stockFields: ['stock', 'currentstock', 'quantityinstock'],
                quantityFields: ['srdtlqty', 'quantity', 'qty']
            },
            srNameAttributes
        );

        // ---------------------------------------
        // 4) On change of SIId, fetch Sale Invoice lines
        // ---------------------------------------
        const invoiceDropdown = document.getElementById("SIId");
        const customerDropdown = document.getElementById("CustomerId");

        // Wait for TomSelect to initialize
        await new Promise((resolve) => {
            const observer = new MutationObserver((mutations, obs) => {
                if (invoiceDropdown.tomselect) {
                    obs.disconnect();
                    resolve();
                }
            });
            observer.observe(invoiceDropdown, { attributes: true, childList: false, subtree: false });
        });

        const siTomSelectInstance = invoiceDropdown.tomselect;
        siTomSelectInstance.on("change", async function (selectedValue) {
            const tomCustomerInstance = customerDropdown.tomselect;
            if (!selectedValue || selectedValue === "0") {
                console.log("No Sale Invoice chosen. Resetting table.");

                // Optionally reset the customer
                if (tomCustomerInstance) {
                    tomCustomerInstance.clear();
                }

                // Clear the table
                advancedDynamicTableInstance.updateData({
                    productsData,
                    taxMasterData,
                    prefilledRows: [],
                    prefilledTaxMaster: [],
                    subtotalId: "SRSubTotal",
                    totalId: "SRTotal",
                    discountId: "SRDiscount",
                    isDiscountAllowed: true,
                    isEditMode: false,
                    mode: 'create',
                    editTemplateType: 'Template_1',
                    unitPriceFields: ['productprice', 'unitprice', 'price'],
                    stockFields: ['stock', 'currentstock', 'quantityinstock'],
                    quantityFields: ['quantity', 'qty', 'podtlqty'],
                    taxDetailCollectionName: "SRDtlTaxDtos",
                    vatBreakdownCollectionName: "SRVATBreakdownDtos",
                    detailIdFieldName: "SRDtlId",
                    docIdFieldName: "SRId"
                }, srNameAttributes);

                return;
            }

            try {
                const response = await fetch(`/Inventory/SI/GetSIById?id=${selectedValue}`);
                if (!response.ok) {
                    throw new Error(`Error: ${response.status} - ${response.statusText}`);
                }
                const result = await response.json();

                if (!result.success) {
                    console.error("Failed to load Sale Invoice data:", result.message);
                    return;
                }

                const siData = result.data; // { siDtlDtos, siDtlTaxDtos, customerId, etc. }
                const { siDtlDtos, siDtlTaxDtos, customerId } = siData;

                // Set the customer in the TomSelect
                tomCustomerInstance.setValue(customerId);

                // Map SI lines -> SR lines
                const mapDetailLines = (lines, srId) =>
                    lines.map(x => ({
                        Id: x.id,
                        SRId: srId,
                        ProductId: x.productId,
                        SRDtlQty: x.siDtlQty,
                        SRDtlPrice: x.siDtlPrice,
                        SRDtlTotal: x.siDtlTotal,
                        SRDtlTotalAfterVAT: x.siDtlTotalAfterVAT // if your siDtl has it
                    }));

                const mappedVoucher = mapDetailLines(siDtlDtos, selectedValue);

                // Map SI tax -> SR tax lines
                const mapTaxLines = (taxLines, srId) =>
                    taxLines.map(t => ({
                        Id: t.id,
                        SRDtlId: t.siDtlId,
                        SRId: srId,
                        TaxId: t.taxId,
                        TaxAmount: t.taxAmount,
                        AfterTaxAmount: t.afterTaxAmount
                    }));

                const mappedTax = mapTaxLines(siDtlTaxDtos, selectedValue);

                // Reassign "fake" IDs
                let newFakeIdCounter = 1;
                const srIdMap = {};
                mappedVoucher.forEach(line => {
                    srIdMap[newFakeIdCounter] = line.Id; // real -> fake
                    line.Id = newFakeIdCounter;
                    newFakeIdCounter++;
                });

                mappedTax.forEach(tax => {
                    const matchedFake = Object.keys(srIdMap).find(k => srIdMap[k] === tax.SRDtlId);
                    if (matchedFake) {
                        tax.SRDtlId = parseInt(matchedFake, 10);
                    } else {
                        console.warn(`No fakeId found for SRDtlId: ${tax.SRDtlId}. Skipping tax line.`);
                    }
                });

                // Update the table
                advancedDynamicTableInstance.updateData({
                    productsData,
                    taxMasterData,
                    prefilledRows: mappedVoucher,
                    prefilledTaxMaster: mappedTax,
                    subtotalId: "SRSubTotal",
                    totalId: "SRTotal",
                    discountId: "SRDiscount",
                    isDiscountAllowed: true,
                    isEditMode: true,
                    mode: 'create',
                    editTemplateType: 'Template_1',
                    unitPriceFields: ['srdtlprice', 'productprice', 'price'],
                    stockFields: ['stock', 'currentstock', 'quantityinstock'],
                    quantityFields: ['srdtlqty', 'quantity', 'qty'],
                    taxDetailCollectionName: "SRDtlTaxDtos",
                    vatBreakdownCollectionName: "SRVATBreakdownDtos",
                    detailIdFieldName: "SRDtlId",
                    docIdFieldName: "SRId"
                }, srNameAttributes);

            } catch (error) {
                console.error("Error fetching Sale Invoice data:", error);
            }
        });





        //==================================================
        //================= Product opening ================
        //==================================================
        $(function () {
            // When the modal is about to be shown
            $('#createProductModal').on('show.bs.modal', function (event) {
                $('#createProductModalBody').empty();
                let $modalBody = $('#createProductModalBody');

                $modalBody.html('<div class="text-center text-muted">Loading...</div>');

                // The partial URL
                let url = '@Url.Action("CreatePartial", "Product", new { area = "Inventory", typeOfPartialView = "Sale" })';

                $.get(url)
                    .done(function (partialHtml) {
                        $modalBody.html(partialHtml);

                        let $form = $('#createProductForm');
                        if ($form.length > 0) {
                            $form.on('submit', function (e) {
                                e.preventDefault();
                                submitCreateProductForm($form[0]); // pass the raw DOM element
                            });
                        }
                    })
                    .fail(function () {
                        $modalBody.html('<div class="alert alert-danger">Failed to load product form.</div>');
                    });
            });

            // The AJAX POST to create the product
            async function submitCreateProductForm(formElement) {
                let formData = new FormData(formElement);
                let url = '@Url.Action("CreatePartialPost", "Product", new { area = "Inventory" })';

                try {
                    let response = await fetch(url, {
                        method: 'POST',
                        body: formData
                    });
                    if (!response.ok) throw new Error(`Status: ${response.status}`);

                    let contentType = response.headers.get('content-type');
                    if (contentType && contentType.includes('application/json')) {
                        // success scenario
                        let json = await response.json();
                        if (json.success) {
                            addNewProductToAllProductSelects(json.newProductId, json.newProductName);
                            let modal = document.getElementById('createProductModal');
                            let bsModal = bootstrap.Modal.getInstance(modal);
                            bsModal.hide();
                            notyf.success(`Product created: ${json.newProductName}`);

                            productsData.push({
                                value: json.newProductId,
                                text: json.newProductName,
                                unitPrice: json.newProductUnitPrice,
                                stock: 0
                            });
                        } else {
                            notyf.error("Failed to create product (JSON response).");
                        }
                    } else {
                        let html = await response.text();
                        $('#createProductModalBody').html(html);

                        let $newForm = $('#createProductForm');
                        if ($newForm.length > 0) {
                            $newForm.on('submit', function (e) {
                                e.preventDefault();
                                submitCreateProductForm($newForm[0]);
                            });
                        }
                    }
                } catch (err) {
                    console.error('Error submitting product form:', err);
                    notyf.error("Error submitting form.");
                }
            }

            function addNewProductToAllProductSelects(productId, productName) {
                let $productSelects = $('.product-select');
                if ($productSelects.length === 0) return; // No such dropdowns

                $productSelects.each(function () {
                    let tomSelectInstance = this.tomselect;

                    if (tomSelectInstance) {
                        // 1. Add the new option to TomSelect
                        tomSelectInstance.addOption({
                            value: productId,
                            text: productName
                        });

                        // 2. Set the newly added product as the selected value
                        //tomSelectInstance.setValue(productId);
                    }
                });
            }

        });


        //==================================================
        //================= Customer opening ===============
        //==================================================
        $(function () {
            // When the modal is about to be shown
            $('#createCustomerModal').on('show.bs.modal', function (event) {
                $('#createCustomerModalBody').empty();
                let $modalBody = $('#createCustomerModalBody');

                $modalBody.html('<div class="text-center text-muted">Loading...</div>');

                // The partial URL
                let url = '@Url.Action("CreatePartial", "Customer", new { area = "Management" })';

                $.get(url)
                    .done(function (partialHtml) {
                        $modalBody.html(partialHtml);

                        let $form = $('#createCustomerForm');
                        if ($form.length > 0) {
                            $form.on('submit', function (e) {
                                e.preventDefault();
                                submitCreateCustomerForm($form[0]); // pass the raw DOM element
                            });
                        }
                    })
                    .fail(function () {
                        $modalBody.html('<div class="alert alert-danger">Failed to load product form.</div>');
                    });
            });

            // The AJAX POST to create the product
            async function submitCreateCustomerForm(formElement) {
                let formData = new FormData(formElement);
                let url = '@Url.Action("CreatePartialPost", "Customer", new { area = "Management" })';

                try {
                    let response = await fetch(url, {
                        method: 'POST',
                        body: formData
                    });
                    if (!response.ok) throw new Error(`Status: ${response.status}`);

                    let contentType = response.headers.get('content-type');
                    if (contentType && contentType.includes('application/json')) {
                        // success scenario
                        let json = await response.json();
                        if (json.success) {
                            addNewCustomerToDp(json.newId, json.newName);
                            let modal = document.getElementById('createCustomerModal');
                            let bsModal = bootstrap.Modal.getInstance(modal);
                            bsModal.hide();
                            notyf.success(`Supplier created: ${json.newName}`);
                        } else {
                            notyf.error("Failed to create Customer (JSON response).");
                        }
                    } else {
                        let html = await response.text();
                        $('#createCustomerModalBody').html(html);

                        let $newForm = $('#createCustomerForm');
                        if ($newForm.length > 0) {
                            $newForm.on('submit', function (e) {
                                e.preventDefault();
                                submitCreateCustomerForm($newForm[0]);
                            });
                        }
                    }
                } catch (err) {
                    console.error('Error submitting Customer form:', err);
                    notyf.error("Error submitting form.");
                }
            }

            function addNewCustomerToDp(Id, Name) {
                // Get the DOM element from the jQuery object
                let $select = $('#CustomerId');
                if ($select.length > 0) {
                    let selectElem = $select[0];
                    // Check if TomSelect is initialized on this element
                    if (selectElem.tomselect) {
                        // Add the new option
                        selectElem.tomselect.addOption({
                            value: Id,
                            text: Name
                        });
                        // Optionally, set it as the selected value:
                        //selectElem.tomselect.setValue(Id);
                    } else {
                        console.log("TomSelect instance not found on #CustomerId.");
                    }
                }
            }
        });

    </script>
}
