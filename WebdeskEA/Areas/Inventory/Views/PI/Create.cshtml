@model PIDto
@{
    ViewData["Title"] = "Purchase Invoice";
}


@{
    var currentUrl = Context.Request.Path.ToString();
    var tenantId = Context.TenantId();
    var companyId = Context.CompanyId();
    var isTenantAdmin = Context.IsTenantAdmin();

    // 1) Serialize product options for the product dropdown inside the dynamic table
    var productOptions = Newtonsoft.Json.JsonConvert.SerializeObject(
      Model.ProductDtos.Select(x => new
      {
          value = x.Id,
          text = x.ProductName,
          unitPrice = x.ProductPrice,
          stock = x.Stock
      })
    );

    // 2) If you maintain a list of tax master records for the "Add Tax" dropdown (similar to SI),
    //    serialize it here. If you don't have a TaxMasterDtos in PIDto, remove this block.
    var taxMasterJson = Newtonsoft.Json.JsonConvert.SerializeObject(Model.TaxMasterDtos);

    // 3) Pre-filled PI detail rows
    var prefilledVoucher = Newtonsoft.Json.JsonConvert.SerializeObject(Model.PIDtlDtos);

    // 4) Pre-filled PI tax details (line-level taxes)
    //    If your domain doesn't have PIDtlTaxDtos, remove or comment this out.
    var prefilledTaxMaster = Newtonsoft.Json.JsonConvert.SerializeObject(Model.PIDtlTaxDtos);
}


<!--====================== -->
<!-- The Bootstrap modal -->
<!--====================== -->
<div class="modal fade" id="createProductModal" tabindex="-1" aria-labelledby="createProductModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">

            <div class="modal-header">
                <h5 class="modal-title">Create Product</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>

            <div class="modal-body" id="createProductModalBody">
                <div class="text-center text-muted">Loading...</div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="createSupplierModal" tabindex="-1" aria-labelledby="createSupplierModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">

            <div class="modal-header">
                <h5 class="modal-title">Create Supplier</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>

            <div class="modal-body" id="createSupplierModalBody">
                <div class="text-center text-muted">Loading...</div>
            </div>
        </div>
    </div>
</div>



<div class="page-header">
    <div class="row align-items-center">
        <div class="col-sm mb-2 mb-sm-0">
            <h1 class="page-header-title">Add @ViewBag.NameOfForm</h1>
        </div>
    </div>
</div>

@if (!ViewData.ModelState.IsValid)
{
    foreach (var state in ViewData.ModelState)
    {
        if (state.Value.Errors.Count > 0)
        {
            foreach (var error in state.Value.Errors)
            {
                <script>
                    notyf.error({
                        message: '@error.ErrorMessage',
                        duration: 10000 // 10 seconds
                    });
                </script>
            }
        }
    }
}
<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <!-- Body -->
            <div class="card-body">
                <form id="productForm"
                      class="js-validate"
                      asp-action="Create"
                      method="post"
                      enctype="multipart/form-data"
                      novalidate>
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="mb-4">
                                <h5>General Information</h5>
                            </div>
                        </div>

                        <!-- Product Code -->
                        <div class="col-sm-4">
                            <div class="mb-4">
                                <label>Code</label>
                                <div class="js-form-message">
                                    <input type="hidden" asp-for="PICode" />
                                    <input type="text" class="form-control" asp-for="PICode" required data-msg="Code is Required." disabled />
                                    <span class="invalid-feedback">Code is Required.</span>
                                </div>
                            </div>
                        </div>


                        <!-- SO Date -->
                        <div class="col-sm-4">
                            <div class="mb-4">
                                <label asp-for="PIDate">Date</label>
                                <div class="js-form-message">
                                    <input type="date" asp-for="PIDate"
                                           class="form-control"
                                           required
                                           data-msg="Please select a valid date.">
                                    <span class="invalid-feedback">Please select a valid date.</span>
                                </div>
                            </div>
                        </div>

                        <!-- Supplier -->
                        <div class="col-sm-4">
                            <div class="mb-4">
                                <label asp-for="SupplierId">Supplier</label>
                                <div class="input-group tom-select-custom js-form-message">
                                    <select id="SupplierId"
                                            class="js-select form-select"
                                            asp-for="SupplierId"
                                            asp-items="@(new SelectList(Model.SupplierDtos, "Id", "Name"))"
                                            required
                                            data-msg="Please select a Supplier."
                                            data-hs-tom-select-options='{"placeholder": "--- Select Supplier ---"}'>
                                        <option value="">--- Select Supplier ---</option>
                                    </select>
                                    <!-- Button appended to the input group -->
                                    <button type="button"
                                            class="btn btn-soft-primary"
                                            data-bs-toggle="modal"
                                            data-bs-target="#createSupplierModal">
                                        <i class="bi-plus"></i>
                                    </button>
                                </div>
                                <span class="invalid-feedback">Please select a valid supplier.</span>
                            </div>
                        </div>

                        <!-- PO -->
                        <div class="col-sm-4">
                            <div class="mb-4">
                                <label asp-for="POId">Purchase Order</label>
                                <div class="tom-select-custom js-form-message">
                                    <select
                                            class="js-select form-select"
                                            asp-for="POId"
                                            asp-items="@(new SelectList(Model.PODtos, "Id", "POCode"))"
                                            data-hs-tom-select-options='{"placeholder": "--- Select Purchase Order ---"}'>
                                        <option value="">--- Select Purchase Order ---</option>
                                    </select>
                                    <span class="invalid-feedback" asp-validation-for="POId">Please select a valid Purchase Order.</span>
                                </div>
                            </div>
                        </div>


                        <!-- Summary -->
                        @{
                            #region OK
                        }
                        <div class="col-sm-12">
                            <div class="mb-4">
                                <div class="card">
                                    <div class="card-header d-flex justify-content-between align-items-center">
                                        <h5 class="card-title">Product / Service</h5>
                                        <button type="button" class="btn btn-soft-primary" data-bs-toggle="modal" data-bs-target="#createProductModal">
                                            <i class="bi-plus"></i> New Product
                                        </button>
                                    </div>
                                    <div class="card-body" id="soCreateContainer">

                                        <div class="table-responsive">
                                            <table class="table align-middle table-nowrap" id="productTable">
                                                <thead class="thead-light">
                                                    <tr>
                                                        <th width="30%">Product</th>
                                                        <th>Current Stock</th>
                                                        <th>Unit Price</th>
                                                        <th width="10%">Quantity</th>
                                                        <th>Price</th>
                                                        <th>Price After VAT</th> <!-- If you want to show price after tax -->
                                                        <th>Actions</th>
                                                    </tr>
                                                </thead>
                                                <tbody id="productTableBody">
                                                    <!-- Dynamic rows will be inserted here -->
                                                </tbody>
                                                <tfoot style="text-align:center">
                                                    <tr>
                                                        <td colspan="6" style="text-align: center;">
                                                            <button id="addRowBtn" class="btn btn-soft-primary">
                                                                <i class="bi-plus"></i>
                                                            </button>
                                                        </td>
                                                    </tr>
                                                </tfoot>
                                            </table>
                                        </div>
                                        <!-- Total Summary -->
                                        <div class="mt-4">
                                            <div class="card">
                                                <div class="card-body">
                                                    <div class="row">
                                                        <div class="col text-end">
                                                            <span class="badge bg-soft-primary text-primary fs-5">Total Quantity:</span>
                                                            <span id="totalQuantity" class="text-dark fs-5 fw-bold">0</span>
                                                        </div>
                                                        <div class="col text-end">
                                                            <span class="badge bg-soft-info text-info fs-5">Total Per Piece Price:</span>
                                                            <span id="totalPerPiecePrice" class="text-dark fs-5 fw-bold">0.00</span>
                                                        </div>
                                                        <div class="col text-end">
                                                            <span class="badge bg-soft-warning text-warning fs-5">Total Unit Price:</span>
                                                            <span id="totalUnitPrice" class="text-dark fs-5 fw-bold">0.00</span>
                                                        </div>
                                                        <div class="col text-end">
                                                            <span class="badge bg-soft-success text-success fs-5">Total Price:</span>
                                                            <span id="grandTotal" class="text-dark fs-5 fw-bold">0.00</span>
                                                        </div>
                                                    </div>
                                                    <hr />
                                                    <!-- If you want a row for displaying VAT breakdown: -->
                                                    <div class="row mt-3" id="vatBreakdownRow"></div>
                                                    <!-- Hidden container for dynamic VAT breakdown inputs -->
                                                    <div id="vatBreakdownHiddenContainer" style="display:none;"></div>
                                                </div>
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>

                        @{
                            #endregion
                        }


                        <div class="row d-flex justify-content-center">
                            <!-- Subtotal -->
                            <div class="col-sm-3">
                                <div class="mb-4">
                                    <label asp-for="PISubTotal">SubTotal</label>
                                    <div class="js-form-message">
                                        <input type="hidden" asp-for="PISubTotal" class="form-control subtotal-hidden" />
                                        <input asp-for="PISubTotal"
                                               class="form-control subtotal-visible"
                                               disabled
                                               required
                                               data-msg="Subtotal is required.">
                                        <span class="invalid-feedback">Please provide a valid subtotal.</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Discount -->
                            <div class="col-sm-3">
                                <div class="mb-4">
                                    <label asp-for="PIDiscount">Discount</label>
                                    <div class="js-form-message">
                                        <input asp-for="PIDiscount"
                                               class="form-control discount-input"
                                               data-msg="Discount cannot exceed subtotal.">
                                        <span class="invalid-feedback">Please provide a valid discount.</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Total -->
                            <div class="col-sm-3">
                                <div class="mb-4">
                                    <label asp-for="PITotal">Total</label>
                                    <div class="js-form-message">
                                        <input type="hidden" asp-for="PITotal" class="form-control total-hidden" />
                                        <input asp-for="PITotal"
                                               class="form-control total-visible"
                                               disabled
                                               required
                                               data-msg="Total is required.">
                                        <span class="invalid-feedback">Please provide a valid total.</span>
                                    </div>
                                </div>
                            </div>

                            <div class="col-sm-3">
                                <div class="mb-4">
                                    <label for="PITotalAfterVAT">Total (After VAT)</label>
                                    <div class="js-form-message">
                                        <input type="hidden" asp-for="PITotalAfterVAT"
                                               class="form-control totalVat-hidden" />
                                        <input asp-for="PITotalAfterVAT"
                                               class="form-control totalVat-Visible"
                                               disabled value="0.00" />
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>

                    <!-- Submit Button -->
                    <div class="d-flex justify-content-left gap-3 mt-3">
                        <button type="submit" class="btn btn-primary me-2" id="submitBtn">Submit</button>
                        <a asp-action="Index" class="btn btn-white" id="bt">Cancel</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<style>
    /* Fix for dropdown overflow in the table */
    .tom-select-dropdown {
        z-index: 1050 !important; /* Ensure dropdown appears above other elements */
    }

    .table-responsive {
        overflow: visible !important; /* Allow the dropdown to display properly */
    }

</style>
<!-- JS CompanySelect -->
<script src="~/FrontentJs/dropdowns/companyselect.js"></script>

@section scripts {

    <script>
        (function () {
            window.onload = function () {


                // INITIALIZATION OF NAVBAR VERTICAL ASIDE
                // =======================================================
                new HSSideNav('.js-navbar-vertical-aside').init()


                // INITIALIZATION OF FORM SEARCH
                // =======================================================
                new HSFormSearch('.js-form-search')


                // INITIALIZATION OF BOOTSTRAP DROPDOWN
                // =======================================================
                HSBsDropdown.init()


                // INITIALIZATION OF SELECT
                // =======================================================
                HSCore.components.HSTomSelect.init('.js-select')


                // INITIALIZATION OF ADD FIELD
                // =======================================================
                new HSAddField('.js-add-field', {
                    addedField: field => {
                        HSCore.components.HSTomSelect.init(field.querySelector('.js-select-dynamic'))
                        HSCore.components.HSMask.init(field.querySelector('.js-input-mask'))
                    }
                })


                // INITIALIZATION OF INPUT MASK
                // =======================================================
                HSCore.components.HSMask.init('.js-input-mask')


                // INITIALIZATION CompanySelect
                // =======================================================
                var companyId = '@companyId';
                initializeCompanySelect(companyId);
            }
        })()
    </script>


    <script>
        (function () {
            // INITIALIZATION OF FORM VALIDATION
            // =======================================================
            HSBsValidation.init('.js-validate');

            // Additional Validation for Products
            const form = document.getElementById('productForm');
            form.addEventListener('submit', function (event) {
                //event.preventDefault();
                const rows = document.querySelectorAll("#productTableBody tr");
                if (rows.length === 0) {
                    event.preventDefault();
                    notyf.error({
                        message: "You must add at least one product.",
                        duration: 10000, // 10 seconds
                    });
                    return;
                }

                let isValid = true;

                rows.forEach(row => {
                    const qty = parseFloat(row.querySelector('.product-qty').value) || 0;
                    const total = parseFloat(row.querySelector('.product-total').textContent) || 0;

                    if (qty <= 0 || total <= 0) {
                        isValid = false;
                    }
                });

                if (!isValid) {
                    event.preventDefault();
                    notyf.error({
                        message: "Each product must have a valid quantity and total price.",
                        duration: 10000, // 10 seconds
                    });
                }
            });
        })();
    </script>



    <script type="module">
        //----------------------------------------------------------------------
        // 1) Import the AdvancedDynamicTable component
        //----------------------------------------------------------------------
        import { AdvancedDynamicTable } from '/Frontentjs/dynamicComponents/dynamicTable.js';

        //----------------------------------------------------------------------
        // 2) Parse data from the server
        //----------------------------------------------------------------------
        let productsData = @Html.Raw(productOptions);
        // If you have a tax master dataset, uncomment:
        const taxMasterData = @Html.Raw(taxMasterJson);
        const prefilledRows = @Html.Raw(prefilledVoucher);
        const prefilledTaxMaster = @Html.Raw(prefilledTaxMaster);

        // For advanced functionalities: re-map real DB IDs to “fake” IDs
        // on the client, just like in your SI example.

        // Let's create a local map from fakeID => realID
        let fakeIdCounter = 1;
        const pidtlIdMap = {};

        // Re-assign “fake” IDs to each PIDtlDto
        prefilledRows.forEach(row => {
            pidtlIdMap[fakeIdCounter] = row.Id; // store real => fake
            row.Id = fakeIdCounter;             // override with fake
            fakeIdCounter++;
        });

        // Re-map the detail ID references in the tax lines, if you have them
        prefilledTaxMaster.forEach(tax => {
            const matchingFakeId = Object.keys(pidtlIdMap)
                .find(key => pidtlIdMap[key] === tax.PIDtlId);
            if (matchingFakeId) {
                tax.PIDtlId = parseInt(matchingFakeId);
            } else {
                console.warn(`No fakeId found for PIDtlId: ${tax.PIDtlId}. Skipping tax line.`);
            }
        });

        //----------------------------------------------------------------------
        // 3) Name attributes for PIDtlDtos (for model binding)
        //----------------------------------------------------------------------
        const piNameAttributes = {
            base: "@nameof(@Model.PIDtlDtos)",
            productId: "@nameof(PIDtlDto.ProductId)",
            quantity: "@nameof(PIDtlDto.PIDtlQty)",
            unitPrice: "@nameof(PIDtlDto.PIDtlPrice)",
            total: "@nameof(PIDtlDto.PIDtlTotal)",
            afterVAT: "@nameof(PIDtlDto.PIDtlTotalAfterVAT)",
        };

        //----------------------------------------------------------------------
        // 4) Instantiate AdvancedDynamicTable
        //----------------------------------------------------------------------
        let advancedDynamicTableInstance = new AdvancedDynamicTable(
            "productTableBody",    // tbody ID
            "addRowBtn",           // "Add Row" button ID
            {
                productsData,
                prefilledRows,
                taxMasterData,       // If your UI has "Add Tax" for lines
                prefilledTaxMaster,  // Re-mapped line-level taxes

                // 4a) Field IDs for Subtotal, Discount, Total
                subtotalId: "@nameof(Model.PISubTotal)",
                totalId: "@nameof(Model.PITotal)",
                discountId: "@nameof(Model.PIDiscount)",

                // 4b) The collection names for taxes and breakdown
                // If you have line-level tax records:
                taxDetailCollectionName: "PIDtlTaxDtos",
                vatBreakdownCollectionName: "PIVATBreakdownDtos",
                detailIdFieldName: "PIDtlId",
                docIdFieldName: "PIId",

                // 4c) Additional config
                isDiscountAllowed: true,
                isEditMode: true,
                mode: 'create',
                editTemplateType: 'Template_1',

                // 4d) Field mapping
                unitPriceFields: ['unitprice', 'productprice', 'price'],
                stockFields: ['stock', 'currentstock', 'quantityinstock'],
                quantityFields: ['pidtlqty', 'quantity', 'qty']
            },
            piNameAttributes
        );

        //----------------------------------------------------------------------
        // 5) Handle Purchase Order selection to auto-fill lines
        //----------------------------------------------------------------------
        const purchaseOrderDropdown = document.getElementById("POId");
        const supplierDropdown = document.getElementById("SupplierId");

        // Wait until TomSelect is initialized on the PO dropdown
        await new Promise((resolve) => {
            const observer = new MutationObserver((mutations, obs) => {
                if (purchaseOrderDropdown.tomselect) {
                    obs.disconnect();
                    resolve();
                }
            });
            observer.observe(purchaseOrderDropdown, {
                attributes: true, childList: false, subtree: false
            });
        });

        const tomSelectInstancePO = purchaseOrderDropdown.tomselect;
        const tomSelectInstanceSupp = supplierDropdown.tomselect;

        // A helper function to map PO Dtl => PI Dtl
        // Adjust property names to match your PODto/PODtlDto structure
        const mapPoToPi = (poDtlDtos, piId) => poDtlDtos.map(poDtl => ({
            Id: poDtl.id,         // The real DB ID from the PO detail
            PIId: piId,             // Link to the main PI
            ProductId: poDtl.productId,
            PIDtlQty: poDtl.poDtlQty,
            PIDtlPrice: poDtl.poDtlPrice,
            PIDtlTotal: poDtl.poDtlTotal
        }));

        // If your PO also has line-level tax details, map them similarly
        const mapPoTaxToPiTax = (poDtlTaxDtos, piId) => poDtlTaxDtos.map(poTax => ({
            Id: poTax.id,
            PIId: piId,
            PIDtlId: poTax.poDtlId, // We'll override with the “fake” ID
            TaxId: poTax.taxId,
            TaxAmount: poTax.taxAmount,
            AfterTaxAmount: poTax.afterTaxAmount
        }));

        // Listen for changes in the PO dropdown
        tomSelectInstancePO.on("change", async function (selectedValue) {
            if (!selectedValue || selectedValue === "0") {
                console.log("No Purchase Order selected. Resetting the table.");

                // Optionally clear the supplier
                if (tomSelectInstanceSupp) {
                    tomSelectInstanceSupp.clear();
                }

                // Reset the table with no lines
                advancedDynamicTableInstance.updateData({
                    productsData: productsData,
                    prefilledRows: [],
                    prefilledTaxMaster: [],
                    taxMasterData,

                    taxDetailCollectionName: "PIDtlTaxDtos",
                    vatBreakdownCollectionName: "PIVATBreakdownDtos",
                    detailIdFieldName: "PIDtlId",
                    docIdFieldName: "PIId",

                    subtotalId: "@nameof(Model.PISubTotal)",
                    totalId: "@nameof(Model.PITotal)",
                    discountId: "@nameof(Model.PIDiscount)",
                    isDiscountAllowed: true,
                    isEditMode: false,
                    mode: 'create',
                    editTemplateType: 'Template_1',

                    unitPriceFields: ['productprice', 'unitprice', 'price'],
                    stockFields: ['currentstock', 'stock', 'quantityinstock'],
                    quantityFields: ['pidtlqty', 'quantity', 'qty']
                }, piNameAttributes);

                return;
            }

            // Fetch the PO data from your controller
            try {
                const response = await fetch(`/Inventory/PO/GetPOById?id=${selectedValue}`);
                if (!response.ok) {
                    throw new Error(`Error: ${response.status} - ${response.statusText}`);
                }
                const result = await response.json();

                if (!result.success) {
                    console.error("Failed to load PO data:", result.message);
                    return;
                }

                // result.data should contain the PO + detail lines
                const POData = result.data;
                const { poDtlDtos, poDtlTaxDtos, supplierId } = POData;

                // Set the Supplier dropdown
                if (tomSelectInstanceSupp) {
                    tomSelectInstanceSupp.setValue(supplierId);
                }

                // Map the PO detail lines to PI detail lines
                const prefilledVoucherFromPO = mapPoToPi(poDtlDtos, selectedValue);

                // If you also have PO line-level tax details, map them:
                let prefilledTaxMasterFromPO = [];
                if (poDtlTaxDtos && poDtlTaxDtos.length) {
                    prefilledTaxMasterFromPO = mapPoTaxToPiTax(poDtlTaxDtos, selectedValue);
                }

                // Assign new “fake” IDs to these newly fetched lines
                let newFakeCounter = 1000; // some offset so we don't clash with existing lines
                const piFakeIdMap = {};
                prefilledVoucherFromPO.forEach(line => {
                    piFakeIdMap[newFakeCounter] = line.Id; // real => fake
                    line.Id = newFakeCounter;
                    newFakeCounter++;
                });

                // Re-map the tax lines to reference the new “fake” IDs
                prefilledTaxMasterFromPO.forEach(taxLine => {
                    const matchedFakeId = Object.keys(piFakeIdMap)
                        .find(k => piFakeIdMap[k] === taxLine.PIDtlId);
                    if (matchedFakeId) {
                        taxLine.PIDtlId = parseInt(matchedFakeId, 10);
                    } else {
                        console.warn(`No fakeId found for PIDtlId: ${taxLine.PIDtlId}. Skipping tax line.`);
                    }
                });

                // Update the table data
                advancedDynamicTableInstance.updateData({
                    productsData,
                    prefilledRows: prefilledVoucherFromPO,
                    taxMasterData,
                    prefilledTaxMaster: prefilledTaxMasterFromPO,

                    subtotalId: "@nameof(Model.PISubTotal)",
                    totalId: "@nameof(Model.PITotal)",
                    discountId: "@nameof(Model.PIDiscount)",
                    isDiscountAllowed: true,
                    isEditMode: true,
                    mode: 'edit',
                    editTemplateType: 'Template_1',

                    // Mapping for line-level tax
                    taxDetailCollectionName: "PIDtlTaxDtos",
                    vatBreakdownCollectionName: "PIVATBreakdownDtos",
                    detailIdFieldName: "PIDtlId",
                    docIdFieldName: "PIId",

                    unitPriceFields: ['pidtlprice', 'productprice', 'price'],
                    stockFields: ['stock', 'currentstock', 'quantityinstock'],
                    quantityFields: ['pidtlqty', 'quantity', 'qty']
                }, piNameAttributes);

            } catch (error) {
                console.error("Error fetching PO data:", error);
            }
        });




        //==================================================
        //================= Product opening ================
        //==================================================
        $(function () {
            // When the modal is about to be shown
            $('#createProductModal').on('show.bs.modal', function (event) {
                $('#createProductModalBody').empty();
                let $modalBody = $('#createProductModalBody');

                $modalBody.html('<div class="text-center text-muted">Loading...</div>');

                // The partial URL
                let url = '@Url.Action("CreatePartial", "Product", new { area = "Inventory", typeOfPartialView = "Purchase" })';

                $.get(url)
                    .done(function (partialHtml) {
                        $modalBody.html(partialHtml);

                        let $form = $('#createProductForm');
                        if ($form.length > 0) {
                            $form.on('submit', function (e) {
                                e.preventDefault();
                                submitCreateProductForm($form[0]); // pass the raw DOM element
                            });
                        }
                    })
                    .fail(function () {
                        $modalBody.html('<div class="alert alert-danger">Failed to load product form.</div>');
                    });
            });

            // The AJAX POST to create the product
            async function submitCreateProductForm(formElement) {
                let formData = new FormData(formElement);
                let url = '@Url.Action("CreatePartialPost", "Product", new { area = "Inventory" })';

                try {
                    let response = await fetch(url, {
                        method: 'POST',
                        body: formData
                    });
                    if (!response.ok) throw new Error(`Status: ${response.status}`);

                    let contentType = response.headers.get('content-type');
                    if (contentType && contentType.includes('application/json')) {
                        // success scenario
                        let json = await response.json();
                        if (json.success) {
                            addNewProductToAllProductSelects(json.newProductId, json.newProductName);
                            let modal = document.getElementById('createProductModal');
                            let bsModal = bootstrap.Modal.getInstance(modal);
                            bsModal.hide();
                            notyf.success(`Product created: ${json.newProductName}`);

                            productsData.push({
                                value: json.newProductId,
                                text: json.newProductName,
                                unitPrice: json.newProductUnitPrice,
                                stock: 0
                            });
                        } else {
                            notyf.error("Failed to create product (JSON response).");
                        }
                    } else {
                        let html = await response.text();
                        $('#createProductModalBody').html(html);

                        let $newForm = $('#createProductForm');
                        if ($newForm.length > 0) {
                            $newForm.on('submit', function (e) {
                                e.preventDefault();
                                submitCreateProductForm($newForm[0]);
                            });
                        }
                    }
                } catch (err) {
                    console.error('Error submitting product form:', err);
                    notyf.error("Error submitting form.");
                }
            }

            function addNewProductToAllProductSelects(productId, productName) {
                let $productSelects = $('.product-select');
                if ($productSelects.length === 0) return; // No such dropdowns

                $productSelects.each(function () {
                    let tomSelectInstance = this.tomselect;

                    if (tomSelectInstance) {
                        // 1. Add the new option to TomSelect
                        tomSelectInstance.addOption({
                            value: productId,
                            text: productName
                        });

                        // 2. Set the newly added product as the selected value
                        //tomSelectInstance.setValue(productId);
                    }
                });
            }

        });



        //==================================================
        //================= Supplier opening ===============
        //==================================================
        $(function () {
            // When the modal is about to be shown
            $('#createSupplierModal').on('show.bs.modal', function (event) {
                $('#createSupplierModalBody').empty();
                let $modalBody = $('#createSupplierModalBody');

                $modalBody.html('<div class="text-center text-muted">Loading...</div>');

                // The partial URL
                let url = '@Url.Action("CreatePartial", "Supplier", new { area = "Management" })';

                $.get(url)
                    .done(function (partialHtml) {
                        $modalBody.html(partialHtml);
                        initPartialTomSelect($modalBody);

                        let $form = $('#createSupplierForm');
                        if ($form.length > 0) {
                            $form.on('submit', function (e) {
                                e.preventDefault();
                                submitCreateSupplierForm($form[0]); // pass the raw DOM element
                            });
                        }
                    })
                    .fail(function () {
                        $modalBody.html('<div class="alert alert-danger">Failed to load product form.</div>');
                    });
            });

            // The AJAX POST to create the product
            async function submitCreateSupplierForm(formElement) {
                let formData = new FormData(formElement);
                let url = '@Url.Action("CreatePartialPost", "Supplier", new { area = "Management" })';

                try {
                    let response = await fetch(url, {
                        method: 'POST',
                        body: formData
                    });
                    if (!response.ok) throw new Error(`Status: ${response.status}`);

                    let contentType = response.headers.get('content-type');
                    if (contentType && contentType.includes('application/json')) {
                        // success scenario
                        let json = await response.json();
                        if (json.success) {
                            addNewSupplierToDp(json.newId, json.newName);
                            let modal = document.getElementById('createSupplierModal');
                            let bsModal = bootstrap.Modal.getInstance(modal);
                            bsModal.hide();
                            notyf.success(`Supplier created: ${json.newName}`);
                        } else {
                            notyf.error("Failed to create Supplier (JSON response).");
                        }
                    } else {
                        let html = await response.text();
                        $('#createSupplierModalBody').html(html);

                        let $newForm = $('#createSupplierForm');
                        if ($newForm.length > 0) {
                            $newForm.on('submit', function (e) {
                                e.preventDefault();
                                submitCreateSupplierForm($newForm[0]);
                            });
                        }
                    }
                } catch (err) {
                    console.error('Error submitting product form:', err);
                    notyf.error("Error submitting form.");
                }
            }

            function addNewSupplierToDp(Id, Name) {
                // Get the DOM element from the jQuery object
                let $select = $('#SupplierId');
                if ($select.length > 0) {
                    let selectElem = $select[0];
                    // Check if TomSelect is initialized on this element
                    if (selectElem.tomselect) {
                        // Add the new option
                        selectElem.tomselect.addOption({
                            value: Id,
                            text: Name
                        });
                        // Optionally, set it as the selected value:
                        //selectElem.tomselect.setValue(Id);
                    } else {
                        console.log("TomSelect instance not found on #SupplierId.");
                    }
                }
            }



            function initPartialTomSelect($container) {
                $container.find('.js-partial-select').each(function () {
                    let selectElement = this;

                    // Check if TomSelect has already been initialized
                    if ($._data(selectElement, "events")) {
                        console.log(selectElement.tomselect)
                        // Destroy existing TomSelect instance first
                        if (selectElement.tomselect) {
                            selectElement.tomselect.destroy();
                        }
                    }
                });
            }


        });





    </script>
}