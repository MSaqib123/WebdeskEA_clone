@model VoucherDto
@{
    ViewData["Title"] = "Voucher";
}

@{
    var currentUrl = Context.Request.Path.ToString();
    var tenantId = Context.TenantId();
    var companyId = Context.CompanyId();
    var isTenantAdmin = Context.IsTenantAdmin();

    var prefilledVoucher = Newtonsoft.Json.JsonConvert.SerializeObject(Model.VoucherDtlDtos);
    var SupplierData = Newtonsoft.Json.JsonConvert.SerializeObject(Model.SupplierDtos);
    var CoaData = Newtonsoft.Json.JsonConvert.SerializeObject(Model.COADtos);
    var prefilledPurchaseInvouce = Newtonsoft.Json.JsonConvert.SerializeObject(Model.PIDtos);
}


<div class="page-header">
    <div class="row align-items-center">
        <div class="col-sm mb-2 mb-sm-0">
            <h1 class="page-header-title">Expense Voucher</h1>
        </div>
    </div>
</div>

@if (!ViewData.ModelState.IsValid)
{
    foreach (var state in ViewData.ModelState)
    {
        if (state.Value.Errors.Count > 0)
        {
            foreach (var error in state.Value.Errors)
            {
                <script>
                    notyf.error({
                        message: '@error.ErrorMessage',
                        duration: 10000 // 10 seconds
                    });
                </script>
            }
        }
    }
}
<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <!-- Body -->
            <div class="card-body">
                <form id="productForm"
                      class="js-validate"
                      asp-action="PCVEdit"
                      method="post"
                      enctype="multipart/form-data"
                      novalidate>
                    <input type="hidden" asp-for="Id" />
                    <div class="row">

                        <div class="col-sm-12">
                            <div class="mb-4">
                                <h5>General Information</h5>
                            </div>
                        </div>
                        <!-- Product Code -->
                        <div class="col-sm-3">
                            <div class="mb-4">
                                <label>Code</label>
                                <div class="js-form-message">
                                    <input type="hidden" asp-for="VoucherCode" />
                                    <input type="text" class="form-control" asp-for="VoucherCode" required data-msg="Code is Required." disabled />
                                    <span class="invalid-feedback">Code is Required.</span>
                                </div>
                            </div>
                        </div>
                        <!-- SO Date -->
                        <div class="col-sm-3">
                            <div class="mb-4">
                                <label asp-for="VoucherDate">Date</label>
                                <div class="js-form-message">
                                    <input type="date" asp-for="VoucherDate"
                                           class="form-control"
                                           required
                                           data-msg="Please select a valid date.">
                                    <span class="invalid-feedback">Please select a valid date.</span>
                                </div>
                            </div>
                        </div>
                        <!-- Narration -->
                        <div class="col-sm-3">
                            <div class="mb-4">
                                <label asp-for="VoucherNarration">Narration</label>
                                <div class="js-form-message">
                                    <input type="text" asp-for="VoucherNarration"
                                           class="form-control"
                                           data-msg="Please provide a narration.">
                                    <span class="invalid-feedback">Please provide a valid narration.</span>
                                </div>
                            </div>
                        </div>

                        <!-- Summary -->
                        @{
                            #region Summery
                        }
                        <div class="col-sm-12">
                            <div class="mb-4">
                                <div class="card">
                                    <div class="card-header d-flex justify-content-between align-items-center">
                                        <h5 class="card-title">Voucher Detail</h5>
                                    </div>
                                    <div class="card-body" id="voucherCreateContainer">

                                        @*
                                        //========================
                                        //======= Detail =========
                                        //========================
                                        *@
                                        @{
                                            #region Details
                                        }
                                        <div class="row">
                                            <div class="col-sm-3">
                                                <div class="mb-3">
                                                    <label for="coatypedp">Account Type</label>
                                                    <div class="tom-select-custom">
                                                        <select class="js-select form-select" name="coatypedp" Id="coatypedp"
                                                                asp-items="@(new SelectList(Model.COATypeDtos, "Id", "CoatypeName"))"
                                                                autocomplete="off" data-hs-tom-select-options='{"placeholder": "--- Select ---"}'>
                                                            <option value="0">-- Select --</option>
                                                        </select>
                                                    </div>
                                                    <span class="invalid-feedback">AccountType is Required.</span>
                                                </div>
                                            </div>

                                            <div class="col-sm-3">
                                                <div class="mb-3">
                                                    <label for="@nameof(VoucherDtlDto.COAId)">Select Chart of Account</label>
                                                    <div class="tom-select-custom">
                                                        <select class="js-select form-select" name="@nameof(VoucherDtlDto.COAId)" id="@nameof(VoucherDtlDto.COAId)"
                                                                asp-items="@(new SelectList(Model.COADtos, "Id", "AccountName"))"
                                                                autocomplete="off" data-hs-tom-select-options='{"placeholder": "--- Select ---"}'>
                                                            <option value="0">-- Select --</option>
                                                        </select>
                                                    </div>
                                                    <span class="invalid-feedback">Chart of Account is Required.</span>
                                                </div>
                                            </div>

                                            <div class="col-sm-3">
                                                <div class="mb-4">
                                                    <label>Debit Amount</label>
                                                    <div class="js-form-message">
                                                        <input type="number" class="form-control" name="@nameof(VoucherDtlDto.DbAmount)" data-msg="Code is Required." value="0" />
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-sm-3">
                                                <div class="mb-3">
                                                    <label>Credit Amount</label>
                                                    <div class="js-form-message">
                                                        <input type="number" class="form-control" name="@nameof(VoucherDtlDto.CrAmount)" data-msg="Credit is Required." placeholder="Credit is Required" value="0" />
                                                        <span class="invalid-feedback">Code is Required.</span>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-sm-3">
                                                <div class="mb-3">
                                                    <label for="Remarks">Remarks</label>
                                                    <div class="js-form-message">
                                                        <input type="text" class="form-control" name="@nameof(VoucherDtlDto.Remarks)" data-msg="Remarks is Required." />
                                                    </div>
                                                </div>
                                            </div>

                                        </div>

                                        <!-- Submit Button -->
                                        <div class="d-flex justify-content-start gap-2">
                                            <!-- Existing "Add" button -->
                                            <button type="button" class="btn btn-secondary" id="addBtn">
                                                <i class="bi-plus"></i> Add
                                            </button>

                                            <!-- NEW "Update" button (hidden by default) -->
                                            <button type="button" class="btn btn-success" id="updateBtn" style="display: none;">
                                                <i class="bi-check2"></i> Update
                                            </button>

                                            <!-- NEW "Cancel" button (hidden by default) -->
                                            <button type="button" class="btn btn-light" id="cancelBtn" style="display: none;">
                                                Cancel
                                            </button>

                                        </div>
                                        @{
                                            #endregion
                                        }

                                        @*
                                        //========================
                                        //======== Table =========
                                        //========================
                                        *@
                                        @{
                                            #region Table
                                        }
                                        <div class="card mt-5">
                                            <div class="table-responsive datatable-custom">
                                                <table id="voucherTable" class="table table-lg table-borderless table-thead-bordered table-nowrap table-align-middle card-table" data-hs-datatables-options='{
                                                       "columnDefs": [{
                                                          "targets": [0],
                                                          "orderable": false
                                                        }],
                                                       "order": [],
                                                       "info": {
                                                         "totalQty": "#datatableWithPaginationInfoTotalQty"
                                                       },
                                                       "search": "#datatableSearch",
                                                       "entries": "#datatableEntries",
                                                       "pageLength": 15,
                                                       "isResponsive": false,
                                                       "isShowPaging": false,
                                                       "pagination": "datatablePagination"
                                                     }'>
                                                    <thead class="thead-light">
                                                        <tr>
                                                            <th width="20%">Chart of Account</th>
                                                            <th width="20%">Debit Amount</th>
                                                            <th width="20%">Credit Amount</th>
                                                            <th width="20%">Remarks</th>
                                                            <th width="20%">Actions</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="voucherTableBody">
                                                        <!-- Dynamic rows will be inserted here -->
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>

                                        <div class="row mt-4">
                                            <div class="d-flex justify-content-end">
                                                <div class="text-end me-4">
                                                    <span class="badge bg-soft-primary text-primary fs-5">Total Credit:</span>
                                                    <span id="totalCredit" class="text-dark fs-5 fw-bold">0</span>
                                                </div>
                                                <div class="text-end me-5">
                                                    <span class="badge bg-soft-primary text-primary fs-5">Total Debit:</span>
                                                    <span id="totalDebit" class="text-dark fs-5 fw-bold">0.00</span>
                                                </div>
                                            </div>
                                        </div>
                                        @{
                                            #endregion
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                        @{
                            #endregion
                        }
                    </div>

                    <!-- Submit Button -->
                    <div class="d-flex justify-content-left gap-3 mt-3">
                        <button type="submit" class="btn btn-primary me-2" id="submitBtn">Submit</button>
                        <a asp-action="EVIndex" class="btn btn-white" id="bt">Cancel</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- JS CompanySelect -->
<script src="~/FrontentJs/dropdowns/companyselect.js"></script>

@section scripts {
    <script type="module">
        import { COAbyJVSelectManager } from '/Frontentjs/Dropdowns/COAbyJVSelect.js';
        const COAbyJVSelectManagers = new COAbyJVSelectManager(
            '/Common/DropDown',
            'coatypedp',
            'COAId'
        );
    </script>

    <!-- ====================== YOUR JS SCRIPT ====================== -->
    <script>
        /**
         * Global data from server
         */
        const prefilledRowsVoucher = @Html.Raw(@prefilledVoucher);
        const prefilledPurchaseInvouce = @Html.Raw(@prefilledPurchaseInvouce);

        /**
         * We'll assume you have "notyf" available:
         *   const notyf = new Notyf();
         * If not, import it from CDN or local
         */

        /*****************************************************************
         * 1) PrefilledRowRenderer
         *    Renders existing or new rows, plus toggles the Reset link.
         *****************************************************************/
        class PrefilledRowRenderer {
            static renderRows(tableBody, prefilledRows, formFields, isPrefilledData) {
                prefilledRows.forEach((rowData, index) => {
                    const newRow = this.createRow(rowData, index, formFields, isPrefilledData);
                    tableBody.appendChild(newRow);
                });
            }

            static createRow(rowData, rowIndex, formFields, isPrefilledData = false) {
                const row = document.createElement("tr");

                // Keep the row's index in a data attribute so we can use it later
                row.dataset.rowIndex = rowIndex;

                // Decide how to read from rowData
                const accountName = !isPrefilledData
                    ? (rowData.COAId?.text || "N/A")
                    : (rowData.AccountName || "N/A");
                const coaId = !isPrefilledData
                    ? (rowData.COAId?.id || 0)
                    : (rowData.COAId);
                

                // Debit/Credit
                const debitAmount = rowData.DbAmount || "0";
                const creditAmount = rowData.CrAmount || "0";

                // Remarks 
                const Remarks = rowData.Remarks || "-"

                // Save "original" data
                const originalData = {
                    COAId: { id: coaId, text: accountName },
                    DbAmount: debitAmount,
                    CrAmount: creditAmount,
                    Remarks: Remarks
                };
                row.dataset.original = JSON.stringify(originalData);
                // For newly created rows, oldOriginal = original
                row.dataset.oldOriginal = row.dataset.original;

                row.innerHTML = `
                              <td>
                                ${accountName}
                                <input type="hidden" name="VoucherDtlDtos[${rowIndex}].COAId" value="${coaId}">
                              </td>
                              <td>
                                ${debitAmount}
                                <input type="hidden" name="VoucherDtlDtos[${rowIndex}].DbAmount" value="${debitAmount}">
                              </td>
                              <td>
                                ${creditAmount}
                                <input type="hidden" name="VoucherDtlDtos[${rowIndex}].CrAmount" value="${creditAmount}">
                              </td>
                              <td>
                                ${Remarks}
                                <input type="hidden" name="VoucherDtlDtos[${rowIndex}].Remarks" value="${Remarks}">
                              </td>
                              <td>
                                <div class="btn-group" role="group">
                                  <a class="btn btn-white btn-sm edit-btn" title="Edit">
                                    <i class="bi-pencil-fill me-1"></i> Edit
                                  </a>
                                  <div class="btn-group">
                                    <a class="btn btn-white btn-icon btn-sm dropdown-toggle dropdown-toggle-empty"
                                       data-bs-toggle="dropdown"
                                       aria-expanded="false"></a>
                                    <div class="dropdown-menu dropdown-menu-end mt-1">
                                      <a class="dropdown-item reset-btn" title="Reset">
                                        <i class="bi-arrow-counterclockwise dropdown-item-icon"></i> Reset
                                      </a>
                                      <a class="dropdown-item delete-btn" title="Delete">
                                        <i class="bi-trash dropdown-item-icon"></i> Delete
                                      </a>
                                    </div>
                                  </div>
                                </div>
                              </td>
                            `;
                // Hide the reset link if oldOriginal==original
                this.toggleResetVisibility(row);
                return row;
            }

            /**
             * If row.dataset.oldOriginal == row.dataset.original => hide the Reset link
             */
            static toggleResetVisibility(row) {
                const resetLink = row.querySelector('.reset-btn');
                if (!resetLink) return;

                if (row.dataset.oldOriginal === row.dataset.original) {
                    resetLink.style.display = "none";
                } else {
                    resetLink.style.display = "block";
                }
            }
        }

        /*****************************************************************
         * 2) CLASS: VoucherManager
         *    Manages add/edit/update/delete, with optional invoice.
         *****************************************************************/
        class VoucherManager {
            constructor(tableId, options = {}) {
                this.tableBody = document.querySelector(`#${tableId} tbody`);
                this.addBtn = document.getElementById("addBtn");
                this.updateBtn = document.getElementById("updateBtn");
                this.cancelBtn = document.getElementById("cancelBtn");
                this.submitBtn = document.getElementById("submitBtn");

                this.totalDebitEl = document.getElementById("totalDebit");
                this.totalCreditEl = document.getElementById("totalCredit");

                this.formFields = options.formFields || {};
                this.prefilledRowsVoucher = options.prefilledRowsVoucher || [];
                this.prefilledPurchaseInvouce = options.prefilledPurchaseInvouce || [];

                this.tomSelectInstances = {};

                this.isEditingRow = false;
                this.currentEditingRow = null;

                this.initialize();
            }

            initialize() {
                // Render prefilled
                PrefilledRowRenderer.renderRows(
                    this.tableBody,
                    this.prefilledRowsVoucher,
                    this.formFields,
                    true
                );

                // Setup event listeners
                this.bindEvents();
                // Setup TomSelect
                this.initTomSelect();
                // Recalc totals
                this.updateTotals();
                // Real-time double-check
                this.bindRealTimeDebitCreditValidation();

                this.showAddMode();
            }

            showAddMode() {
                this.addBtn.style.display = "inline-block";
                this.updateBtn.style.display = "none";
                this.cancelBtn.style.display = "none";
            }

            showEditMode() {
                this.addBtn.style.display = "none";
                this.updateBtn.style.display = "inline-block";
                this.cancelBtn.style.display = "inline-block";
            }

            bindEvents() {
                // Add row
                this.addBtn?.addEventListener("click", () => this.addNewRow());
                // Update
                this.updateBtn?.addEventListener("click", () => this.updateExistingRow());
                // Cancel
                this.cancelBtn?.addEventListener("click", () => this.cancelCurrentEdit());

                // Table-level: edit/delete/reset
                this.tableBody?.addEventListener("click", (evt) => {
                    const target = evt.target.closest("button, a");
                    if (!target) return;

                    const row = target.closest("tr");
                    if (!row) return;

                    const isEdit = target.classList.contains("edit-btn");
                    const isDelete = target.classList.contains("delete-btn");
                    const isReset = target.classList.contains("reset-btn");

                    if (isEdit) {
                        this.startEditingRow(row);
                    } else if (isDelete) {
                        this.deleteRow(row);
                    } else if (isReset) {
                        this.resetRowToOldRecord(row);
                    }
                });

                // On final form submit => check row count + totals
                this.submitBtn?.addEventListener("click", (evt) => {
                    if (this.tableBody.children.length === 0) {
                        evt.preventDefault();
                        notyf.error("You must add at least one voucher detail row before submitting.");
                        return;
                    }
                    const totalD = parseFloat(this.totalDebitEl.textContent);
                    const totalC = parseFloat(this.totalCreditEl.textContent);
                    if (totalD !== totalC) {
                        evt.preventDefault();
                        notyf.error("Debit and Credit must be equal before submitting.");
                    }
                });
            }

            initTomSelect() {
                // For each field => create TomSelect
                Object.keys(this.formFields).forEach((key) => {
                    const el = document.querySelector(this.formFields[key]);
                    if (el && el.tagName === "SELECT") {
                        this.tomSelectInstances[key] = new TomSelect(el, {
                            persist: false,
                            create: false,
                            placeholder: "-- Select --"
                        });

                        // If this is the invoice dropdown => handle auto-credit
                        // if (key === "PaidInvoiceId") {
                        //     this.tomSelectInstances[key].on("change", (val) => {
                        //         this.handleInvoiceSelection(val);
                        //     });
                        // }
                    }
                });
            }

            bindRealTimeDebitCreditValidation() {
                const dbInput = document.querySelector(this.formFields.DbAmount);
                const crInput = document.querySelector(this.formFields.CrAmount);
                if (!dbInput || !crInput) return;

                dbInput.addEventListener("input", () => {
                    const dbVal = parseFloat(dbInput.value) || 0;
                    const crVal = parseFloat(crInput.value) || 0;
                    if (dbVal > 0 && crVal > 0) {
                        dbInput.value = 0;
                        notyf.error("Cannot fill both Debit and Credit at once!");
                    }
                });

                crInput.addEventListener("input", () => {
                    const dbVal = parseFloat(dbInput.value) || 0;
                    const crVal = parseFloat(crInput.value) || 0;
                    if (dbVal > 0 && crVal > 0) {
                        crInput.value = 0;
                        notyf.error("Cannot fill both Debit and Credit at once!");
                    }
                });
            }

            handleInvoiceSelection(value) {
                // If user picks an invoice => fill Cr if needed
                const numericId = parseInt(value, 10);
                const crInput = document.querySelector(this.formFields.CrAmount);
                const dbInput = document.querySelector(this.formFields.DbAmount);
                if (!crInput || !dbInput) return;

                if (numericId === 0) {
                    // optional => reset them
                    crInput.value = 0;
                    dbInput.value = 0;
                    return;
                }
                // fill from prefilledSalesInvouce
                const foundInv = this.prefilledPurchaseInvouce.find(x => x.Id === numericId);
                if (foundInv) {
                    dbInput.value = foundInv.PITotal || 0;
                }
            }

            // ---------------------------------------------------------------
            // ADD
            // ---------------------------------------------------------------
            addNewRow() {
                const rowData = this.collectFormData();
                if (!rowData) return; // blocked

                // exactly one of Debit or Credit
                const dbVal = parseFloat(rowData.DbAmount) || 0;
                const crVal = parseFloat(rowData.CrAmount) || 0;
                if ((dbVal <= 0 && crVal <= 0) || (dbVal > 0 && crVal > 0)) {
                    notyf.error("Please enter exactly one of Debit or Credit.");
                    return;
                }
                
                // Insert row with next index
                const newIndex = this.tableBody.children.length;
                const newRow = PrefilledRowRenderer.createRow(rowData, newIndex, this.formFields, false);
                this.tableBody.appendChild(newRow);

                // Reset top form
                this.resetForm();
                this.updateTotals();

                notyf.success("Voucher detail row added successfully.");
            }

            // ---------------------------------------------------------------
            // EDIT
            // ---------------------------------------------------------------
            startEditingRow(row) {
                if (this.isEditingRow && this.currentEditingRow && this.currentEditingRow !== row) {
                    this.cancelCurrentEdit();
                }
                this.isEditingRow = true;
                this.currentEditingRow = row;
                this.showEditMode();

                // Load row's data
                const origDataStr = row.dataset.original;
                const origData = JSON.parse(origDataStr);
                this.loadFormData(origData);
            }

            // ---------------------------------------------------------------
            // UPDATE
            // ---------------------------------------------------------------
            updateExistingRow() {
                if (!this.isEditingRow || !this.currentEditingRow) return;

                const rowData = this.collectFormData();
                if (!rowData) return;

                const dbVal = parseFloat(rowData.DbAmount) || 0;
                const crVal = parseFloat(rowData.CrAmount) || 0;
                if ((dbVal <= 0 && crVal <= 0) || (dbVal > 0 && crVal > 0)) {
                    notyf.error("Please enter exactly one of Debit or Credit.");
                    return;
                }

                // Save old data => so row-level reset is possible
                const oldData = this.currentEditingRow.dataset.original;
                this.currentEditingRow.dataset.oldOriginal = oldData;


                // Overwrite row
                this.applyDataToRow(this.currentEditingRow, rowData);

                this.isEditingRow = false;
                this.currentEditingRow = null;
                this.showAddMode();
                this.resetForm();
                this.updateTotals();

                notyf.success("Voucher row updated successfully.");
            }

            // ---------------------------------------------------------------
            // CANCEL
            // ---------------------------------------------------------------
            cancelCurrentEdit() {
                this.isEditingRow = false;
                this.currentEditingRow = null;
                this.resetForm();
                this.showAddMode();
            }

            // ---------------------------------------------------------------
            // RESET ROW
            // ---------------------------------------------------------------
            resetRowToOldRecord(row) {
                if (row.dataset.oldOriginal === row.dataset.original) {
                    notyf.error("No older version is available for this row.");
                    return;
                }

                row.dataset.original = row.dataset.oldOriginal;
                const oldObj = JSON.parse(row.dataset.oldOriginal);
                this.applyDataToRow(row, oldObj);

                notyf.success("Row data has been reverted to the old record.");
            }

            // ---------------------------------------------------------------
            // GATHER data from top form
            // ---------------------------------------------------------------
            collectFormData() {
                let allValid = true;
                const rowData = {};

                Object.keys(this.formFields).forEach((key) => {
                    const el = document.querySelector(this.formFields[key]);
                    if (!el) {
                        allValid = false;
                        return;
                    }

                    if (el.tagName === "SELECT") {
                        // TomSelect
                        const ts = this.tomSelectInstances[key];
                        const selectedValue = ts?.getValue();
                        const selectedText = ts?.getItem(selectedValue)?.textContent.trim() || "";

                        // If it's the COA => mandatory, block if 0 or no selection
                        if (key === 'COAId') {
                            if (!selectedValue || selectedValue === "0") {
                                allValid = false;
                            }
                        }
                        // If it's the PaidInvoice => optional => no block

                        rowData[key] = { id: selectedValue, text: selectedText };
                    } else if (el.tagName === "INPUT") {
                        const val = el.value.trim();
                        rowData[key] = val;
                    }
                });

                if (!allValid) {
                    notyf.error("Please fill in all required fields (COA, one of Debit/Credit).");
                    return null;
                }
                return rowData;
            }

            // ---------------------------------------------------------------
            // LOAD row data => top form
            // ---------------------------------------------------------------
            loadFormData(obj) {
                Object.keys(this.formFields).forEach((key) => {
                    const el = document.querySelector(this.formFields[key]);
                    if (!el) return;

                    if (el.tagName === "SELECT") {
                        const ts = this.tomSelectInstances[key];
                        if (ts) {
                            ts.setValue(obj[key].id);
                        }
                    } else if (el.tagName === "INPUT") {
                        el.value = obj[key] || 0;
                    }
                });
            }

            // ---------------------------------------------------------------
            // WRITE data => row (IMPORTANT FIX HERE!)
            // ---------------------------------------------------------------
            applyDataToRow(row, rowData) {
                // Retrieve the row's stable index from data-row-index
                const rowIndex = row.dataset.rowIndex;

                const tds = row.querySelectorAll("td");
                if (tds.length < 5) return;

                const accountName = rowData.COAId?.text || "N/A";
                const coaId = rowData.COAId?.id || 0;


                const dbAmount = rowData.DbAmount || "0";
                const crAmount = rowData.CrAmount || "0";

                const Remarks = rowData.Remarks || "-";

                tds[0].innerHTML = `
                              ${accountName}
                              <input type="hidden" name="VoucherDtlDtos[${rowIndex}].COAId" value="${coaId}">
                            `;
                tds[1].innerHTML = `
                              ${dbAmount}
                              <input type="hidden" name="VoucherDtlDtos[${rowIndex}].DbAmount" value="${dbAmount}">
                            `;
                tds[2].innerHTML = `
                              ${crAmount}
                              <input type="hidden" name="VoucherDtlDtos[${rowIndex}].CrAmount" value="${crAmount}">
                            `;
                tds[3].innerHTML = `
                            ${Remarks}
                            <input type="hidden" name="VoucherDtlDtos[${rowIndex}].Remarks" value="${Remarks}">
                            `;

                // Overwrite row's dataset.original
                row.dataset.original = JSON.stringify({
                    COAId: { id: coaId, text: accountName },
                    DbAmount: dbAmount,
                    CrAmount: crAmount,
                    Remarks: Remarks
                });

                // Show/hide reset
                PrefilledRowRenderer.toggleResetVisibility(row);
            }

            // ---------------------------------------------------------------
            // DELETE row
            // ---------------------------------------------------------------
            deleteRow(row) {
                if (!confirm("Are you sure you want to delete this row?")) return;

                if (this.isEditingRow && this.currentEditingRow === row) {
                    this.cancelCurrentEdit();
                }
                row.remove();
                this.updateTotals();
                notyf.success("Row deleted successfully.");
            }

            // ---------------------------------------------------------------
            // RECALCULATE totals
            // ---------------------------------------------------------------
            updateTotals() {
                let totalDebit = 0;
                let totalCredit = 0;

                this.tableBody.querySelectorAll("tr").forEach((r) => {
                    const dbHidden = r.querySelector("input[name*='DbAmount']");
                    const crHidden = r.querySelector("input[name*='CrAmount']");

                    const dbVal = parseFloat(dbHidden?.value || 0);
                    const crVal = parseFloat(crHidden?.value || 0);

                    totalDebit += dbVal;
                    totalCredit += crVal;
                });

                this.totalDebitEl.textContent = totalDebit.toFixed(2);
                this.totalCreditEl.textContent = totalCredit.toFixed(2);

                this.validateTotals();
            }

            validateTotals() {
                const d = parseFloat(this.totalDebitEl.textContent);
                const c = parseFloat(this.totalCreditEl.textContent);
                if (d !== c) {
                    this.submitBtn.disabled = true;
                    return false;
                } else {
                    this.submitBtn.disabled = false;
                    return true;
                }
            }

            // ---------------------------------------------------------------
            // RESET top form
            // ---------------------------------------------------------------
            resetForm() {
                Object.keys(this.formFields).forEach((key) => {
                    const el = document.querySelector(this.formFields[key]);
                    if (!el) return;

                    if (el.tagName === "SELECT" && this.tomSelectInstances[key]) {
                        this.tomSelectInstances[key].clear();
                    } else if (el.tagName === "INPUT") {
                        el.value = (el.type === "number") ? 0 : "";
                    }
                });
            }
        }

        // =====================================================
        // INSTANTIATE VOUCHER MANAGER
        // =====================================================
        const voucherManager = new VoucherManager("voucherTable", {
            prefilledRowsVoucher: prefilledRowsVoucher,
            prefilledPurchaseInvouce: prefilledPurchaseInvouce,
            formFields: {
                COAId: "select[name='COAId']",        // MANDATORY
                DbAmount: "input[name='DbAmount']",
                CrAmount: "input[name='CrAmount']",
                Remarks: "input[name='Remarks']"
            },
        });
    </script>


    <script>
        (function () {
            window.onload = function () {


                // INITIALIZATION OF NAVBAR VERTICAL ASIDE
                // =======================================================
                new HSSideNav('.js-navbar-vertical-aside').init()


                // INITIALIZATION OF FORM SEARCH
                // =======================================================
                new HSFormSearch('.js-form-search')


                // INITIALIZATION OF BOOTSTRAP DROPDOWN
                // =======================================================
                HSBsDropdown.init()


                // INITIALIZATION OF SELECT
                // =======================================================
                HSCore.components.HSTomSelect.init('.js-select')


                // INITIALIZATION OF ADD FIELD
                // =======================================================
                new HSAddField('.js-add-field', {
                    addedField: field => {
                        HSCore.components.HSTomSelect.init(field.querySelector('.js-select-dynamic'))
                        HSCore.components.HSMask.init(field.querySelector('.js-input-mask'))
                    }
                })


                // INITIALIZATION OF INPUT MASK
                // =======================================================
                HSCore.components.HSMask.init('.js-input-mask')


                // INITIALIZATION CompanySelect
                // =======================================================
                var companyId = '@companyId';
                initializeCompanySelect(companyId);
            }
        })()
    </script>


    <script>
        // (function () {
        //     // INITIALIZATION OF FORM VALIDATION
        //     // =======================================================
        //     HSBsValidation.init('.js-validate');

        //     // Additional Validation for Products
        //     const form = document.getElementById('productForm');
        //     form.addEventListener('submit', function (event) {
        //         //event.preventDefault();
        //         const rows = document.querySelectorAll("#productTableBody tr");
        //         if (rows.length === 0) {
        //             event.preventDefault();
        //             notyf.error({
        //                 message: "You must add at least one product.",
        //                 duration: 10000, // 10 seconds
        //             });
        //             return;
        //         }

        //         let isValid = true;

        //         rows.forEach(row => {
        //             const qty = parseFloat(row.querySelector('.product-qty').value) || 0;
        //             const total = parseFloat(row.querySelector('.product-total').textContent) || 0;

        //             if (qty <= 0 || total <= 0) {
        //                 isValid = false;
        //             }
        //         });

        //         if (!isValid) {
        //             event.preventDefault();
        //             notyf.error({
        //                 message: "Each product must have a valid quantity and total price.",
        //                 duration: 10000, // 10 seconds
        //             });
        //         }
        //     });
        // })();
    </script>

}


